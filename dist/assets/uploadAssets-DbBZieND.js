import{V as y,U as f,aM as u,bo as _,br as G,i5 as V,bA as U,bp as W,bB as K,aA as Q,aK as X,l5 as Y,J as Z}from"./index-BfC8i6jT.js";import{h as ss,N as es,i as x,o as D,A as ts}from"./External-DUpZJXYU.js";import{r as as,n as os,a as ns,d as rs,c as I,l as is,t as cs,u as ls,p as us}from"./uploadAssetErrors-BQFOdUcT.js";import{i as g,h as ps,e as A,m as ms,a as fs}from"./progressUtils-BGaVk-pu.js";const $=1e6,S=20*$,ds=2e9,ys=3;async function gs({data:e,name:t,description:s},a,o){let n=null;try{const r=y(a,"uploads"),i=y(r,"info"),{data:c}=await f(i,{query:{f:"json"},responseType:"json"});u(o);const p=_(a),l=c.maxUploadFileSize*$,d=p?ds:l,T=p?Math.min(S,l):S;if(e.size>d)throw new Error("Data too large");const C=y(r,"register"),{data:j}=await f(C,{query:{f:"json",itemName:ws(t),description:s},responseType:"json",method:"post"});if(u(o),!j.success)throw new Error("Registration failed");const{itemID:R}=j.item;n=y(r,R);const k=y(n,"uploadPart"),F=Math.ceil(e.size/T),w=new Array;for(let m=0;m<F;++m)w.push(e.slice(m*T,Math.min((m+1)*T,e.size)));const h=w.slice().reverse(),E=new Array,z=g(F,o==null?void 0:o.onProgress,"uploadItem"),M=async()=>{for(;h.length!==0;){const m=w.length-h.length,P=h.pop(),b=new FormData,H=z.simulate(m,ps(P.size));try{b.append("f","json"),b.append("file",P),b.append("partId",`${m}`);const{data:J}=await f(k,{timeout:0,body:b,responseType:"json",method:"post"});if(u(o),!J.success)throw new Error("Part upload failed")}finally{H.remove()}}};for(let m=0;m<ys&&h.length!==0;++m)E.push(M());await Promise.all(E);const L=y(n,"commit"),{data:N}=await f(L,{query:{f:"json",parts:w.map((m,P)=>P).join(",")},responseType:"json",method:"post"});if(u(o),!N.success)throw new Error("Commit failed");return N.item}catch(r){if(n!=null){const i=y(n,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw r}}function ws(e){return e.replaceAll("/","_").replaceAll("\\","_")}async function Ls(e,t,s){var n;const a=e.length;if(!a)return(n=s==null?void 0:s.onProgress)==null||n.call(s,1),[];const o=g(a,s==null?void 0:s.onProgress,"uploadAssets");return Promise.all(e.map((r,i)=>hs(r,t,{...s,onProgress:o.makeOnProgress(i)})))}async function hs(e,{layer:t,ongoingUploads:s},a){var r;const o=s.get(e);if(o)return o;if(!qs(t))throw new as;if(Ps(e,t))return(r=a==null?void 0:a.onProgress)==null||r.call(a,1),e;const n=bs(e,t,a);s.set(e,n);try{await n}finally{s.delete(e)}return e}function Ps(e,t){const{parsedUrl:s}=t;return s!=null&&e.metadata.externalSources.some(a=>ss(a,s))}async function bs(e,t,s){const{metadata:a}=e,{displaySource:o}=a,n=v(o==null?void 0:o.source,t),r=!!n,i=a.externalSources.length>0,c=r?Ts(n,t,s):i?As(e,t,s):js(e,t,s),p=await c;return u(s),e.addExternalSources([p]),e}async function Ts(e,t,s){return{source:await O(e,t,s),original:!0}}async function As(e,t,s){const a=B(t),{externalSources:o}=e.metadata,n=Es(o,t);if(!n)throw new os;const r=g(A.uploadConvertibleSource,s==null?void 0:s.onProgress,"uploadConvertibleSource"),i=await O(n,t,{onProgress:r.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const c=n.reduce((l,{asset:d})=>d instanceof File?l+d.size:l,0),p=r.simulate("serviceAssetsToGlb",ms(c));try{return{source:await $s(i,t,a)}}finally{p.remove()}}async function js(e,t,s){const a=g(A.uploadLocalMesh,s==null?void 0:s.onProgress,"uploadLocalMesh"),o=Fs(e,t,{...s,onProgress:a.makeOnProgress("meshToAssetBlob")});return{source:await q([o],t,{...s,onProgress:a.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function Fs(e,t,s){const a=B(t),o=await e.load(s),n=await o.toBinaryGLTF({origin:o.origin,signal:s==null?void 0:s.signal,ignoreLocalTransform:!0});return u(s),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${G()}.glb`,assetType:a}}function Es(e,t){for(const s of e){const a=v(s.source,t);if(a)return a}return null}function v(e,t){if(!e)return null;const{infoFor3D:{supportedFormats:s,editFormats:a}}=t,o=ts(e),n=new Array;let r=!1;for(let i=0;i<o.length;++i){const c=Ns(o[i],s);if(!c)return null;a.includes(c.assetType)&&(r=!0),n.push(c)}return r?n:null}function Ns(e,t){const s=es(e,t);return s?{asset:e,assetType:s}:null}async function O(e,t,s){return q(e.map(a=>Ss(a,s)),t,s)}async function q(e,t,s){const a=g(A.uploadAssetBlobs,s==null?void 0:s.onProgress,"uploadAssetBlobs"),o=await xs(e,t,{...s,onProgress:a.makeOnProgress("prepareAssetItems")});u(s);const n=o.map(({item:i})=>i),{uploadResults:r}=await Ds(n,t,{...s,onProgress:a.makeOnProgress("uploadAssetItems")});return u(s),e.map((i,c)=>Is(o[c],r[c],t))}async function Ss(e,t){const{asset:s,assetType:a}=e;if(s instanceof File)return{blob:s,assetName:s.name,assetType:a};const o=await s.toBlob(t);return u(t),{blob:o,assetName:s.assetName,assetType:a}}async function Us(e,t,s){const{blob:a,assetType:o,assetName:n}=e;let r=null;try{const i=await gs({data:a,name:n},t.url,s);u(s),r={assetType:o,assetUploadId:i.itemID}}catch(i){X(i),Bs().warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!r){const i=await Y(a);if(u(s),!i.isBase64)throw new ls;r={assetType:o,assetData:i.data}}if(!r)throw new us;return{item:r,assetName:n}}function xs(e,t,s){const a=g(e.length,s==null?void 0:s.onProgress,"prepareAssetItems");return Promise.all(e.map(async(o,n)=>{const r=Us(await o,t,{...s,onProgress:a.makeOnProgress(n)});return u(s),r}))}async function Ds(e,t,s){const a=fs(s==null?void 0:s.onProgress);try{const o=await f(y(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(u(s),o.data.uploadResults.length!==e.length)throw new ns(e.length,o.data.uploadResults.length);return o.data}finally{a.remove()}}function Is(e,t,s){const{success:a}=t;if(!a){const{error:p}=t;throw new rs(e.assetName,p)}const{assetHash:o}=t,{assetName:n,item:{assetType:r}}=e,{infoFor3D:{supportedFormats:i}}=s,c=V(r,i);if(!c)throw new I(r);return new x(n,c,[new D(`${s.parsedUrl.path}/assets/${o}`,o)])}async function $s(e,t,s){var p;const a=e.map(({assetName:l,parts:d})=>({assetName:l,assetHash:d[0].partHash})),o=(p=t.capabilities)==null?void 0:p.operations.supportsAsyncConvert3D,n={f:"json",assets:JSON.stringify(a),transportType:"esriTransportTypeUrl",targetFormat:s,async:o},r=y(t.parsedUrl.path,"convert3D");let i;try{i=(await(o?Os:vs)(r,{query:n,responseType:"json",timeout:0})).data}catch{throw new is}const{supportedFormats:c}=t.infoFor3D;return i.assets.map(l=>{const d=U(l.contentType,c);if(!d)throw new I(d);return new x(l.assetName,l.contentType,[new D(l.assetURL,l.assetHash)])})}function vs(e,t){return f(e,t)}async function Os(e,t){const s=(await f(e,t)).data.statusUrl;for(;;){const a=(await f(s,{query:{f:"json"},responseType:"json"})).data;switch(a.status){case"Completed":return f(a.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(a.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await W(Cs)}}function qs(e){return!!e.infoFor3D&&!!e.url}function B(e){const{infoFor3D:t}=e,s=U("model/gltf-binary",t.supportedFormats)??K("glb",t.supportedFormats);if(!s)throw new cs;return s}function Bs(){return Z.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const Cs=Q(1e3);export{Ls as uploadAssets};
