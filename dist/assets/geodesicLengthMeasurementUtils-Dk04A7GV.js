import{jr as h,ep as c,gO as x,fB as S,gt as T,jR as w,lT as d,gq as R,ar as j,cU as z}from"./index-BfC8i6jT.js";import{e as q}from"./projectVectorToVector-C51LtB8f.js";import{x as C}from"./elevationInfoUtils-Dkzy2V0O.js";import{a as i}from"./quantityUtils-B2xRWNSM.js";import{geodesicLength as y}from"./geometryEngine-s82Uc-OG.js";import{w as g,j as Z,v as A,z as B}from"./geodesicUtils-BOUsTR0r.js";function N(e,r,n,t){n.projectToRenderScreen(e,m),n.projectToRenderScreen(r,$),T(t,$,m),w(t,t)}function G(e,r,n,t,l=c()){const u=S(f,e);return u[2]=C(t,u,r,n)||0,t.renderCoordsHelper.toRenderCoords(u,r,l),l}function P(e,r,n,t){return t.type==="2d"?(o.x=e[0],o.y=e[1],o.spatialReference=r,t.toScreen(o)):(G(e,r,n,t,f),t.state.camera.projectToScreen(f,p),h(p[0],p[1]))}const o=q(0,0,0,null),f=c(),m=d(),$=d(),p=x();function Q(e){return R(e)&&g(e)||j(e)}function v(e,r,n,...t){return R(e)&&g(e)?r.apply(void 0,t):j(e)?n.apply(void 0,t):null}const V=1e5;function W(e){const{spatialReference:r}=e;return v(r,U,b,e)}function X(e,r){if(!z(e.spatialReference,r.spatialReference))return null;const{spatialReference:n}=e;return s[0]=e.x,s[1]=e.y,s[2]=e.hasZ?e.z:0,a[0]=r.x,a[1]=r.y,a[2]=r.hasZ?r.z:0,H(s,a,n)}function H(e,r,n){return v(n,L,O,e,r,n)}function L(e,r,n){return i(Z(D,e,r,n).distance,"meters")}function O(e,r,n){return i(y(k(e,r,n),"meters"),"meters")}function U(e){return i(A([e],"meters")[0],"meters")}function b(e){return i(y(e,"meters"),"meters")}function k(e,r,n){return{type:"polyline",spatialReference:n,paths:[[[...e],[...r]]]}}const D=new B,s=c(),a=c();export{N as a,P as d,X as f,V as i,G as l,W as m,v as p,Q as r,H as u};
