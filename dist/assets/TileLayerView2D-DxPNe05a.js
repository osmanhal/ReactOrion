import{cQ as w,cR as y,cS as V,cT as I,az as H,cU as v,O as l,cV as u,J as T,v as n,y as g,z as q}from"./index-BfC8i6jT.js";import"./GeometryUtils-ClkMWevA.js";import"./CIMSymbolHelper-RNagakW-.js";import"./enums-BRXbslMp.js";import"./definitions-ByNBSgP9.js";import"./floatRGBA-BcMV1NFr.js";import"./EffectView-BHVg_MGi.js";import"./Container-D8Z8PR0N.js";import"./WGLContainer-BLE0Uw_u.js";import"./vec4f32-CjrfB-0a.js";import"./Texture-Bq-Yp-pO.js";import"./enums-BlUEVwJR.js";import"./Program-C3FgCIV9.js";import"./TiledDisplayObject-wW3wbRrm.js";import"./LabelMetric-BmRa1Bis.js";import"./StyleDefinition-BK3ROBTO.js";import"./enums-BRzLM11V.js";import"./MagnifierPrograms-Yq5d--ef.js";import"./pbf-W1xbSZIX.js";import"./FeatureCommandQueue-DuEpW0h7.js";import"./UpdateTracking2D-CetJAt3b.js";import"./PieChartMeshWriter-B-BeXjqy.js";import"./renderState-yUi34s5A.js";import"./interfaces-B8ge7Jg9.js";import"./testSVGPremultipliedAlpha-pEtBKrma.js";import{V as U}from"./GraphicsView2D-Cwjshx1r.js";import"./earcut-BrWrA6nz.js";import"./vec3f32-Cw9Q6TO_.js";import{r as b,o as f,n as d}from"./imageUtils-hWM1OzaL.js";import{f as C}from"./LayerView2D-vCOQCX0d.js";import{h as Q}from"./HighlightGraphicContainer-BxpcWmqP.js";import{y as S}from"./LayerView-D3G_E76P.js";import{i as P}from"./RefreshableLayerView-T2pK9W1H.js";import{U as L,_ as k}from"./MapServiceLayerViewHelper-B8wDIbix.js";import{r as z}from"./drapedUtils-Cq2u8YdU.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-BN6jNuTX.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./Rect-CUzevAry.js";import"./BoundingBox-Dn8AJClK.js";import"./DisplayObject-COGNSicI.js";import"./highlightReasons-Xh2OTEQT.js";import"./BufferObject-CLFFt1Oe.js";import"./VertexArrayObject-DJNUJ_t_.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./WGLBrushVTLSymbol-DID28CcD.js";import"./config-MDUrh2eL.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-Cd8GU6R3.js";import"./featureConversionUtils-CGYMoz5K.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./CircularArray-CujHzHWW.js";import"./AttributeStore-Ck0z6t_v.js";import"./labelFormatUtils-DkVwf7tJ.js";import"./TimeOnly-CuAeZtPD.js";import"./centroid-DdLmOD72.js";import"./timeSupport-B4kKaZSt.js";import"./json-Wa8cmqdu.js";import"./ZoomMomentumEstimator-COZR6STZ.js";import"./heatmapTextureUtils-CCcHDKhq.js";import"./constants-D5zmR9t2.js";import"./BindType-BmZEZMMh.js";import"./Util-D9KK83cB.js";import"./TurboLine-CtUXldjS.js";import"./basicInterfaces-wONHx_SN.js";import"./normalizeUtilsSync-DWkgqXC-.js";import"./Bitmap-jrFm-wR1.js";import"./TileContainer-DGzbl-7U.js";import"./ClipRect-QwkcqybV.js";import"./layerViewUtils-D2JqIDZ8.js";import"./AGraphicContainer-7-fooBqc.js";import"./TechniqueInstance-DugsV9W7.js";import"./scaleUtils-DL5-S4xE.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./sublayerUtils-C8bNLJoe.js";import"./popupUtils-6OYxcFTS.js";const F=[0,0];let a=class extends P(b(C(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var i;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(i=this._highlightView)==null||i.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,i==null?void 0:i.effectiveMinLOD,i==null?void 0:i.effectiveMaxLOD),this._fetchQueue=new V({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,r)=>this.fetchTile(e,r)}),this._tileStrategy=new I({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),L(this,this.layer)){const e=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new Q(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(r,h)=>z(r,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,h)=>{e.graphicUpdateHandler({graphic:r,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,i;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(i=this._highlightView)==null||i.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):H()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var i;return v((i=this.layer.tileInfo)==null?void 0:i.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(F,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e=this.tilemapCache,{signal:r,resamplingLevel:h=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(s){if(!l(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const c=new u(m),_=await this.fetchTile(c,{...i,resamplingLevel:h+1});return d(this._tileInfoView,_,c,t)}}throw s}const p=new u(0,0,0,0);let o;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,p,{signal:r}),p.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);o=await this._fetchImage(p,r)}catch(s){if(l(s))throw s;o=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,o,p,t):o}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){l(i)||T.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};n([g()],a.prototype,"resampling",null),n([g()],a.prototype,"tilemapCache",null),a=n([q("esri.views.2d.layers.TileLayerView2D")],a);const si=a;export{si as default};
