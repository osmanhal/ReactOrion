import{aT as x,ca as h,aM as F,aZ as V,bH as I,O as $,J as j}from"./index-BfC8i6jT.js";import{c as v,b as E,E as M,I as O}from"./OrientedImageryViewer-DIiRIRQF.js";import"./ImageryTileLayer-B-YZ2ypl.js";import"./fetchRasterInfo-CRGzxPzd.js";import"./multidimensionalUtils-DIjUKqi2.js";import"./dataUtils-DhADFUS8.js";import"./pixelRangeUtils-DR2RxTkt.js";import"./RasterSymbolizer-CbthH4ql.js";import"./utils-C2H3A1uw.js";import"./cimSymbolUtils-DS1Fp96D.js";import"./ClassBreaksDefinition-CFCBLk51.js";import"./RawBlockCache-DjQlw8pe.js";import"./rasterProjectionHelper-B00wUuFF.js";import"./PolynomialTransform-CeuClFLJ.js";import"./TilemapCache-C4tcvL45.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./GraphicsLayer-B2JC83UW.js";import"./OrientedImageryLayer-BJ2QFfLf.js";import"./requestPresets-BbUE9oCD.js";import"./Circle-BB08Wuoo.js";import"./geodesicUtils-BOUsTR0r.js";import"./Mesh-lqzZlCsM.js";import"./MeshComponent-D498mY_W.js";import"./imageUtils-BfjLvT3i.js";import"./MeshVertexAttributes-BD2PtWGl.js";import"./MeshLocalVertexSpace-DZNf3szf.js";import"./meshVertexSpaceUtils-CcfLNHym.js";import"./triangulationUtils-en0lWBIB.js";import"./earcut-BrWrA6nz.js";import"./DoubleArray-CZhUFo5d.js";import"./Indices-Bl02GO-3.js";import"./plane-ByuX_NXR.js";import"./mathUtils-DIiwy5h7.js";import"./deduplicate-DD1J6YAH.js";import"./projection-PKkfrDjd.js";import"./spatialReferenceEllipsoidUtils-6vOoKuZD.js";import"./computeTranslationToOriginAndRotation-DK7GzGeb.js";import"./BufferView-DcMGflLe.js";import"./vec3-DSC46DgP.js";import"./vec4-CDid__v2.js";import"./projectPointToVector-C0Qwzs7z.js";import"./vertexSpaceConversion-Bg4vy5id.js";import"./External-DUpZJXYU.js";import"./lineSegment-DbTVMGoh.js";import"./sphere-BgvJtIjV.js";import"./ElevationLayer-DjnPzjXZ.js";import"./ArcGISCachedService-Ck_c4zTW.js";import"./TileInfoTilemapCache-D02BJTXT.js";import"./LercDecoder-BGMljx8H.js";import"./WorkerHandle-CXxGr93G.js";import"./ImageryLayer-Dimcsfbr.js";import"./imageBitmapUtils-Bs4FbqLw.js";import"./executeQueryJSON-BvKan1w-.js";import"./query-Ct_ioWiz.js";import"./pbfQueryUtils-BfYlzyKp.js";import"./pbf-W1xbSZIX.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./AttachmentInfo-rwMSayzj.js";import"./executeForIds-CQINWF9R.js";import"./ElevationSamplerData-k1b1ey21.js";import"./ElevationTile-nLRXAw2j.js";import"./Viewshed.glsl-D2C0nY_-.js";import"./WaterSurface.glsl-BrdOaNHj.js";import"./RenderGeometry-BYg-7xwk.js";import"./vec3f32-Cw9Q6TO_.js";import"./Texture-1xthaLvE.js";import"./Matrix4PassUniform-BH4JqvtO.js";import"./interfaces-B8ge7Jg9.js";import"./BindType-BmZEZMMh.js";import"./VertexAttribute-BnAa5VW0.js";import"./Util-D9KK83cB.js";import"./enums-BlUEVwJR.js";import"./Texture-Bq-Yp-pO.js";import"./basicInterfaces-wONHx_SN.js";import"./ShaderTechniqueConfiguration-D3UbJ2mX.js";import"./doublePrecisionUtils-B0owpBza.js";import"./Material-CL7oq3ds.js";import"./triangle-B-TmEFJd.js";import"./renderState-yUi34s5A.js";import"./requestImageUtils-CYZi7VGK.js";import"./orientedBoundingBox-Do1Vt1ct.js";import"./ElevationProvider-BU9L4pxM.js";import"./boundedPlane-xSVxcV1_.js";import"./verticalOffsetUtils-Bdqba6xa.js";import"./hydratedFeatures-Dp0VykK3.js";import"./projectVectorToVector-C51LtB8f.js";import"./frustum-Bdr-rFEQ.js";import"./weather-B3EDJgNZ.js";import"./Scheduler-DSoCN6Hr.js";import"./debugFlags-CX6JgPmI.js";import"./Float4DrawUniform-DSpHBPg2.js";import"./NestedMap-DgiGbX8E.js";import"./Octree-bjpgk3mA.js";import"./InterleavedLayout-D5nIvpjN.js";import"./types-D0PSWh4d.js";import"./floatRGBA-BcMV1NFr.js";import"./Intersector-Dzvq-gms.js";import"./glUtil-C6KhMg1m.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-DJNUJ_t_.js";import"./BufferObject-CLFFt1Oe.js";import"./ColorMaterial.glsl-r8qsLxA-.js";import"./VertexColor.glsl-DMQrT1G9.js";import"./dehydratedFeatures-ONP9sBF3.js";import"./featureConversionUtils-CGYMoz5K.js";import"./edgeUtils-7PCAzCge.js";import"./DecodeSymbolColor.glsl-BR7HIChu.js";import"./SnappingCandidate-O5eRSE6e.js";import"./Normals-FPkG6ULP.js";import"./objectResourceUtils-AgE6Mx7R.js";import"./devEnvironmentUtils-D6qIi8Ky.js";import"./DefaultMaterial_COLOR_GAMMA-iPR_ZT6p.js";import"./resourceUtils-Cd4X6-Sw.js";import"./CIMSymbolHelper-RNagakW-.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-BN6jNuTX.js";import"./GeometryUtils-ClkMWevA.js";import"./enums-BRXbslMp.js";import"./definitions-ByNBSgP9.js";import"./Rect-CUzevAry.js";import"./BoundingBox-Dn8AJClK.js";import"./lineStippleUtils-DdOUX39J.js";import"./projectVectorToPoint-sjRZ-2WD.js";import"./DefaultLayouts-DkwmdUjQ.js";import"./webStyleSymbolUtils-BLz2G3ck.js";import"./Intersector-juYjkWfX.js";import"./RenderCoordsHelper-BbU_hNrx.js";import"./scaleUtils-DL5-S4xE.js";import"./viewpointUtils-t8HSs1zS.js";import"./earthUtils-B4BKKXMy.js";import"./spatialReferenceSupport-BIiDjE2t.js";import"./terrainUtils-BzcC3xJT.js";import"./Environment-zbroFpii.js";import"./quantityUtils-B2xRWNSM.js";import"./Program-C3FgCIV9.js";import"./ShadowCastVisualizeTechniqueConfiguration-DXK-OiGG.js";import"./euclideanLengthMeasurementUtils-D2ZslYzK.js";import"./ray-8l9wECN6.js";import"./ZoomMomentumEstimator-COZR6STZ.js";import"./labelFormatUtils-DkVwf7tJ.js";import"./FeatureTileDescriptor3D-DtDBB7rP.js";import"./elevationInfoUtils-Dkzy2V0O.js";import"./ElevationQueryTileCache-BEPYiqMG.js";import"./LayerConstants-B33OP6sh.js";import"./ElevationRange-BrgM1moX.js";import"./geometryServiceUtils-DujY2RdF.js";import"./project-gQLDAKs4.js";import"./hitTestSelectUtils-UXJPjatw.js";import"./RenderableTile-Co1N3tXi.js";import"./enums-BRzLM11V.js";import"./config-MDUrh2eL.js";import"./TiledDisplayObject-wW3wbRrm.js";import"./DisplayObject-COGNSicI.js";import"./StyleDefinition-BK3ROBTO.js";import"./resources-DkiY2wAJ.js";import"./edgeProcessing-BaVy8Gc3.js";import"./testSVGPremultipliedAlpha-pEtBKrma.js";import"./RenderingContext-B8FOG7Ha.js";import"./ProgramCache-NPIMJ8lZ.js";import"./layerViewUtils-D2JqIDZ8.js";import"./vmEvent-D4Ubqkbq.js";import"./geometryEngine-s82Uc-OG.js";import"./geometryEngineBase-hNmXf8AX.js";import"./hydrated-CC1UoCrK.js";class Jo{constructor(C){this.viewModel=C,this.createFootprints=async l=>{await x(l);const{coveragePolygons:p,currentBestFeature:i,isAdditionalCoverageVisible:o}=this.viewModel;for(const t of p)(t==null?void 0:t.imageID)===i.attributes.objectId?this.viewModel.bestFeatureFootprint=new h({attributes:{imageID:t==null?void 0:t.imageID},geometry:t,symbol:v,visible:!1}):this.viewModel.additionalFootprints.push(new h({attributes:{imageID:t==null?void 0:t.imageID},geometry:t,symbol:E.clone(),visible:o}))},this.updateFootprint=async(l,p)=>{const{activeViewer:i,currentBestFeature:o,currentCoverageVisible:t,footprintExtent:d}=this.viewModel,m=i==null?void 0:i.imageSize;if(o&&m&&d)try{const r=await M(l,{feature:o,imageProperties:{width:m[0],height:m[1]},options:p,footprintExtent:d});F(p);const c=r.filter(V);if(!c.length)return;const a=[c.map(({x:s,y:f})=>[s,f,1])];a[0].push(a[0][0]);const e=new I({rings:a,spatialReference:c[0].spatialReference});this.viewModel.updateCurrentCoveragePolygon(new h({geometry:e,attributes:{imageID:o.attributes.objectId},symbol:v,visible:t}))}catch(r){$(r)||j.getLogger(this.viewModel).error("update-footprint",r)}},this.updateFootprintPanorama=async(l,p)=>{const{horizontalFieldOfView:i,pitch:o,verticalFieldOfView:t,yaw:d}=l,{activeViewer:m,currentBestFeature:r,currentCoverageVisible:c,footprintExtent:a}=this.viewModel,e=m==null?void 0:m.imageSize;if(!r||!e||!a)return;const{cameraPitch:s,objectId:f}=r.attributes;if(o+s-t/2>180)return void this.viewModel.updateCurrentCoveragePolygon(null);let u=[];if(o+s+t/2<180)u=[[-i/2,t/2],[i/2,t/2],...o-t/2<0?[[-i/2,-t/2],[i/2,-t/2]]:[[i/2,-t/2],[-i/2,-t/2]]];else if(o+s-t/2<180&&o+s+t/2>180){u=[[-i/2,-t/2]];const n=Math.floor(i/6),g=i/n;for(let b=0;b<=n;b++)u.push([b*g-i/2,90-o]);u.push([i/2,-t/2])}const D=u.map(([n,g])=>O(d+n,o+g,e[0],e[1])),y=await M(D,{feature:r,imageProperties:{width:e[0],height:e[1]},options:p,footprintExtent:a});F(p);const w=[y.map(({x:n,y:g})=>[n,g,1])];w[0].push(w[0][0]);const P=new I({rings:w,spatialReference:y[0].spatialReference});this.viewModel.updateCurrentCoveragePolygon(new h({geometry:P,attributes:{imageID:f},symbol:v.clone(),visible:c}))}}}export{Jo as default};
