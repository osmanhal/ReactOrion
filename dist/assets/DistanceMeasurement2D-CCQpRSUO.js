import{v as s,y as n,z as R,cX as ee,k6 as I,k5 as te,ba as g,c8 as $,cY as w,f$ as G,bw as D,dc as ie,ca as A,gv as se,iM as U,hY as ne,iO as j,lR as re,lQ as ae,gx as H,bI as oe,dm as M,aR as E,cb as le,k7 as pe,J as he,k9 as O,gK as me,dl as ue,gk as z,gl as ce,bP as P,c7 as de,bR as B}from"./index-BfC8i6jT.js";import{e as ge}from"./defaultUnit-BEK94Aud.js";import{g as ve,d as ye,D as _e}from"./unitFormatUtils-BLmxKBrJ.js";import{geodesicLength as we,geodesicDensify as fe,planarLength as be}from"./geometryEngine-s82Uc-OG.js";import{w as K,v as T,R as x}from"./geodesicUtils-BOUsTR0r.js";import C from"./GraphicsLayer-B2JC83UW.js";import{f as Me}from"./SnappingVisualizer2D-C8VRf_IF.js";import{l as Le}from"./Draw-DOOmgl8Q.js";import{E as W,p as $e,P as Se}from"./EditGeometryOperations-DmGwV5zN.js";import{n as De,p as Oe,E as Te,f as xe}from"./InteractiveToolBase-Q2z5Ov3P.js";import{S as Ce}from"./GraphicManipulator-CsZNOUHz.js";import{e as Ae}from"./SnappingContext-lR2hMWGP.js";import{f as Re}from"./SnappingDragPipelineStep-Cwt6mPXQ.js";import{a as ke}from"./SnappingManagerPool-CjU8T-Jb.js";import{N as Ie}from"./SnappingManager-D5q8LYBJ.js";import{p as Ge,u as Ue}from"./MeasurementWidgetContent-DGuiJFML.js";import"./getDefaultUnitForView-Dts4f_W1.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./quantityUtils-B2xRWNSM.js";import"./geometryEngineBase-hNmXf8AX.js";import"./hydrated-CC1UoCrK.js";import"./enums-BRXbslMp.js";import"./SnappingVisualizer-Dn1HXI_0.js";import"./PointSnappingHint-DG5oOaY6.js";import"./projectVectorToVector-C51LtB8f.js";import"./projectPointToVector-C0Qwzs7z.js";import"./SnappingOperation-CbINueCr.js";import"./Scheduler-DSoCN6Hr.js";import"./debugFlags-CX6JgPmI.js";import"./keybindings-yv7BPnkG.js";import"./elevationInfoUtils-Dkzy2V0O.js";import"./surfaceCoordinateSystems-Bq8REdqh.js";import"./memoize-DsJmrG76.js";import"./ReactiveSet-Dp1f0Kxk.js";import"./dehydratedFeatureComparison-DqYXmcFw.js";import"./SketchLabelOptions-BGcukdKj.js";import"./hydratedFeatures-Dp0VykK3.js";import"./plane-ByuX_NXR.js";import"./mathUtils-DIiwy5h7.js";import"./geometry2dUtils-DBhp7z2_.js";import"./meshVertexSpaceUtils-CcfLNHym.js";import"./MeshLocalVertexSpace-DZNf3szf.js";import"./drapedUtils-Cq2u8YdU.js";import"./sphere-BgvJtIjV.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./layerViewUtils-D2JqIDZ8.js";import"./geodesicLengthMeasurementUtils-Dk04A7GV.js";import"./UnitSelect-VjCIVazS.js";const L=1e5;let m=class extends De{constructor(e){super(e),this._drawActive=!1,this._measurementLayer=new C({internal:!0,listMode:"hide",visible:!1}),this._manipulatorLayer=new C({internal:!0,listMode:"hide",visible:!1}),this._snappingLayer=new C({internal:!0,listMode:"hide",visible:!1}),this._updatingHandles=new ee,this._vertices=[],this.geodesicDistanceThreshold=null,this.measurement=null,this.measurementLabel=null}initialize(){I("esri/core/t9n/Units").then(t=>{this.messages=t});const e=this.view;this._draw=new Le({view:e}),e.map.addMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),e.focus(),this._snappingManagerResult=ke(e),this.addHandles([te(async()=>{this.messages=await I("esri/core/t9n/Units")}),g(()=>[this.unit,this.geodesicDistanceThreshold,this.messages],()=>{this._updatePolylines()},$),g(()=>[this.view.effectiveTheme.accentColor,this.view.effectiveTheme.textColor],()=>{if(!this._vertices.length)return;const t=this._vertices.map(({coord:i})=>i);for(const{handle:i}of this._vertices)i.remove();this._vertices=[],this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this.manipulators.removeAll(),this._updateSketch(t)}),g(()=>this.snappingOptions.featureSources,t=>{for(const i of t)i.layer!==this._measurementLayer&&i.layer!==this._manipulatorLayer||(i.enabled=!1)},$),this._snappingManagerResult]),Ie(this)}destroy(){const{map:e}=this.view;this._draw.view=null,this._draw=w(this._draw),e.removeMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this._set("measurement",null),this._set("measurementLabel",null),this._measurementLayer=w(this._measurementLayer),this._manipulatorLayer=w(this._manipulatorLayer),this._snappingLayer=w(this._snappingLayer),this._updatingHandles=w(this._updatingHandles),this._resetVertices()}get _snappingManager(){return this._snappingManagerResult.snappingManager}get cursor(){return this._drawActive?"crosshair":null}set editable(e){this._set("editable",e),e||this._draw.reset()}get snappingOptions(){return this._snappingManager.options}get updating(){return this._updatingHandles.updating||this._snappingManager.updating}onActivate(){this._drawActive||this._vertices.length!==0||this._startSketch()}onShow(){this._measurementLayer.visible=!0,this._manipulatorLayer.visible=!0,this._snappingLayer.visible=!0}onHide(){this._measurementLayer.visible=!1,this._manipulatorLayer.visible=!1,this._snappingLayer.visible=!1}_getSnappingContext(e){return new Ae({elevationInfo:{mode:"on-the-ground",offset:0},pointer:e,editGeometryOperations:new W(new $e("point",Se(!1,!1,this.view.spatialReference)),G.Local),visualizer:new Me(this._snappingLayer)})}_resetVertices(){for(const{handle:e}of this._vertices)e.remove();this._vertices=[]}_startSketch(){this._drawActive=!0;const e=this._snappingManager,t=this._draw.create("polyline",{mode:"click",snappingManager:e});t.on(["vertex-add","vertex-update","vertex-remove","cursor-update","undo","redo"],i=>this._updateSketch(i.vertices)),t.on("draw-complete",()=>{this._stopSketch()})}_stopSketch(){this.manipulators.forEach(({manipulator:e})=>{e.interactive=!0}),this._drawActive=!1,this.finishToolCreation()}_updateSketch(e){const{spatialReference:t}=this.view;for(;this._vertices.length>e.length;){const{handle:r,manipulator:u}=this._vertices.pop();r.remove(),this.manipulators.remove(u)}for(let r=this._vertices.length;r<e.length;r++){const[u,d]=e[r],v=new D({x:u,y:d,spatialReference:t}),y=He(v,this.view,this._manipulatorLayer);this.manipulators.add(y);const f=W.fromGeometry(v,G.Local),q=[f.on("vertex-update",b=>{const _=b.vertices.at(0);_&&(this._vertices[r].coord=[_.pos[0],_.pos[1]],this._updatePolylines())}),Oe(y,(b,_,We,Q)=>{const X=this._getSnappingContext(Q),F=this._snappingManager,J=this._updatingHandles,{snappingStep:Z}=Re({snappingContext:X,snappingManager:F,updatingHandles:J});_.next(Te(this.view)).next(S=>{if(S.action==="start"){const k=new D(S.mapStart);b.graphic.geometry=k,f.trySetGeometry(k)}return S}).next(...Z).next(xe({operations:f})).next(()=>{b.graphic.geometry=f.data.geometry})})];this._vertices.push({manipulator:y,coord:[u,d],handle:ie(q)})}const i=this._vertices.length-1,a=this._vertices[i],[l,o]=e[i];a.coord[0]===l&&a.coord[1]===o||(a.coord=[l,o],a.manipulator.graphic.geometry=new D({x:l,y:o,spatialReference:t}));const p=this._drawActive?this._vertices[i].manipulator:null;this.manipulators.forEach(({manipulator:r})=>{r.interactive=p==null||r!==p}),this._updatePolylines()}_updatePolylines(){var v;if(this._vertices.length<2)return void this._measurementLayer.removeAll();const e=this._vertices.map(({coord:y})=>y),{measurement:t,drawing:i,original:a}=Ee(e,this.view.spatialReference,this.geodesicDistanceThreshold);this._set("measurement",t);const l=Be(this.messages,t,this.unit);let o,p;this._set("measurementLabel",l);const{graphics:r}=this._measurementLayer,u=r.length===2,{effectiveTheme:d}=this.view;u?(o=r.at(0),p=r.at(1)):(o=new A({symbol:new se({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[14,12],lineDashEnding:"FullGap",controlPointEnding:"NoConstraint"}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:3.5,color:U(d.accentColor).toArray()},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:5,color:d.accentColor.toArray()}]}}})}),p=new A({symbol:new ne({color:d.textColor,haloColor:j(U(d.textColor,re.Low),.5),haloSize:2,font:new ae({size:14,family:"sans-serif"})})}),r.removeAll(),r.addMany([o,p])),o.geometry=i,p.geometry=(v=a.extent)==null?void 0:v.center,p.symbol.text=l}};function He(e,t,i){const a=j(t.effectiveTheme.accentColor,.5),l={type:"simple-line",width:0},o=8,p=new H({style:"circle",color:a,size:o,outline:l}),r=new H({style:"circle",color:a,size:1.5*o,outline:l}),u=new A({geometry:e,symbol:p});return new Ce({view:t,layer:i,graphic:u,focusedSymbol:r})}function Ee(e,t,i){const a=new oe({paths:[e],spatialReference:t});let l,o;if(t.isGeographic)if(K(t))l=T([a],"meters")[0],o=x(a,L);else{const p=M(a,E.WGS84),r=x(p,L);l=T([p],"meters")[0],o=M(r,t)}else if(t.isWebMercator)l=we(a,"meters"),o=fe(a,L,"meters");else{const p=be(a,"meters");if(i!=null&&p>=i){const r=M(a,E.WGS84),u=x(r,L);l=T([r],"meters")[0],o=M(u,t)}else l=p,o=a}return{measurement:{geometry:o,length:l},original:a,drawing:o}}function ze(e){return e!=null}function Pe(e){if(!e)return!1;const{isGeographic:t,isWebMercator:i,isWGS84:a}=e;return t&&!a&&!K(e)||!t&&!i}function Be(e,t,i){if(!t||!e)return"";switch(i){case"metric":return _e(e,t.length,"meters");case"imperial":return ye(e,t.length,"meters");default:return ve(e,le(t.length,"meters",i),i)}}s([n()],m.prototype,"_drawActive",void 0),s([n({readOnly:!0})],m.prototype,"cursor",null),s([n({value:!0})],m.prototype,"editable",null),s([n({type:Number})],m.prototype,"geodesicDistanceThreshold",void 0),s([n({readOnly:!0})],m.prototype,"measurement",void 0),s([n({readOnly:!0})],m.prototype,"measurementLabel",void 0),s([n()],m.prototype,"messages",void 0),s([n()],m.prototype,"unit",void 0),s([n()],m.prototype,"updating",null),s([n({constructOnly:!0})],m.prototype,"view",void 0),m=s([R("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DTool")],m);let c=class extends Ge{constructor(e){super(e),this.supportedViewType="2d",this.unsupportedErrorMessage="DistanceMeasurement2DViewModel is only supported in 2D views."}initialize(){this.addHandles([g(()=>{var e;return(e=this.view)==null?void 0:e.spatialReference},()=>this.clear()),g(()=>this.unit,e=>{this.tool!=null&&(this.tool.unit=e)},$),g(()=>this.geodesicDistanceThreshold,e=>{this.tool!=null&&(this.tool.geodesicDistanceThreshold=e)},$)])}get geodesicDistanceThreshold(){return this._get("geodesicDistanceThreshold")}set geodesicDistanceThreshold(e){pe(he.getLogger(this),"geodesicDistanceThreshold",{version:"4.29",warnOnce:!0}),this._set("geodesicDistanceThreshold",e)}get measurement(){return this.tool!=null?this.tool.measurement:null}get measurementLabel(){return this.tool!=null?this.tool.measurementLabel:null}get state(){var e;return this.disabled||this.view==null||!ze((e=this.view)==null?void 0:e.spatialReference)?"disabled":this.tool!=null&&this.measurement?this.tool.active?"measuring":"measured":"ready"}get unit(){return this._validateUnit(this.defaultUnit)}set unit(e){this._overrideIfSome("unit",this._validateUnit(e))}get unitOptions(){return O}set unitOptions(e){this._overrideIfSome("unitOptions",this._validateUnits(e))}async start(){const e=this.view;e!=null&&(await me(()=>e.ready),Pe(e.spatialReference)&&await ue()),this.createTool({interactive:!0})}clear(){this.removeTool()}constructTool(){return new m({view:this.view,visible:this.visible,geodesicDistanceThreshold:this.geodesicDistanceThreshold,unit:this.unit})}_validateUnit(e){const{unitOptions:t,defaultUnit:i}=this;return e!=null&&t.includes(e)?e:t.includes(i)?i:t.length>0?t[0]:i}_validateUnits(e){if(e==null)return[];const t=e.filter(i=>O.includes(i));return t.length===0?O.slice():t}};s([n(ge)],c.prototype,"defaultUnit",void 0),s([n()],c.prototype,"geodesicDistanceThreshold",null),s([n({readOnly:!0})],c.prototype,"measurement",null),s([n({readOnly:!0})],c.prototype,"measurementLabel",null),s([n({readOnly:!0})],c.prototype,"state",null),s([n({type:String})],c.prototype,"unit",null),s([n({type:[String]})],c.prototype,"unitOptions",null),c=s([R("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DViewModel")],c);const Y=c,V="esri-distance-measurement-2d",N={base:V,newMeasurementButton:`${V}__clear-button`};let h=class extends ce{constructor(e,t){super(e,t),this.messages=null,this.messagesCommon=null,this.viewModel=new Y}get active(){return this.viewModel.active}get icon(){return"measure-line"}set icon(e){this._overrideIfSome("icon",e)}get label(){var e;return((e=this.messages)==null?void 0:e.widgetLabel)??""}set label(e){this._overrideIfSome("label",e)}get unit(){return this.viewModel.unit}set unit(e){this.viewModel.unit=e}get unitOptions(){return this.viewModel.unitOptions}set unitOptions(e){this.viewModel.unitOptions=e}get view(){return this.viewModel.view}set view(e){this.viewModel.view=e}get visible(){return this.viewModel.visible}set visible(e){this.viewModel.visible=e}render(){const{messages:e,messagesCommon:t,unit:i,unitOptions:a,viewModel:l}=this,{active:o,measurementLabel:p,state:r,supported:u}=l;return P("div",{"aria-label":this.messages.widgetLabel,class:this.classes(N.base,B.widget,B.panel),key:this,role:"presentation"},this.visible?P(Ue,{active:o,measurementItems:[{key:"distance",title:e.distance,value:p}],messages:{...e,notApplicable:t.notApplicable},newMeasurementButtonClass:N.newMeasurementButton,state:r,supported:u,unit:i,unitOptions:a,onNewMeasurementClick:()=>{de(this.viewModel.start())},onUnitChange:d=>{this.unit=d}}):null)}};s([n({readOnly:!0})],h.prototype,"active",null),s([n()],h.prototype,"icon",null),s([n()],h.prototype,"label",null),s([n()],h.prototype,"uiStrings",void 0),s([n(),z("esri/widgets/DistanceMeasurement2D/t9n/DistanceMeasurement2D")],h.prototype,"messages",void 0),s([n(),z("esri/t9n/common")],h.prototype,"messagesCommon",void 0),s([n()],h.prototype,"unit",null),s([n()],h.prototype,"unitOptions",null),s([n()],h.prototype,"view",null),s([n({type:Y})],h.prototype,"viewModel",void 0),s([n({type:Boolean})],h.prototype,"visible",null),h=s([R("esri.widgets.DistanceMeasurement2D")],h);const Ht=h;export{Ht as default};
