import{aZ as V,j2 as R,aM as d,ca as g,ge as $,aT as E,bw as S}from"./index-BfC8i6jT.js";import{$ as I}from"./Mesh-lqzZlCsM.js";import{l as j}from"./MeshVertexAttributes-BD2PtWGl.js";import{N as k,u as F,M as B,E as H,L as q,a as L}from"./OrientedImageryViewer-DIiRIRQF.js";import"./MeshComponent-D498mY_W.js";import"./imageUtils-BfjLvT3i.js";import"./MeshLocalVertexSpace-DZNf3szf.js";import"./meshVertexSpaceUtils-CcfLNHym.js";import"./triangulationUtils-en0lWBIB.js";import"./earcut-BrWrA6nz.js";import"./DoubleArray-CZhUFo5d.js";import"./Indices-Bl02GO-3.js";import"./plane-ByuX_NXR.js";import"./mathUtils-DIiwy5h7.js";import"./deduplicate-DD1J6YAH.js";import"./projection-PKkfrDjd.js";import"./spatialReferenceEllipsoidUtils-6vOoKuZD.js";import"./computeTranslationToOriginAndRotation-DK7GzGeb.js";import"./BufferView-DcMGflLe.js";import"./vec3-DSC46DgP.js";import"./vec4-CDid__v2.js";import"./projectPointToVector-C0Qwzs7z.js";import"./vertexSpaceConversion-Bg4vy5id.js";import"./External-DUpZJXYU.js";import"./ImageryTileLayer-B-YZ2ypl.js";import"./fetchRasterInfo-CRGzxPzd.js";import"./multidimensionalUtils-DIjUKqi2.js";import"./dataUtils-DhADFUS8.js";import"./pixelRangeUtils-DR2RxTkt.js";import"./RasterSymbolizer-CbthH4ql.js";import"./utils-C2H3A1uw.js";import"./cimSymbolUtils-DS1Fp96D.js";import"./ClassBreaksDefinition-CFCBLk51.js";import"./RawBlockCache-DjQlw8pe.js";import"./rasterProjectionHelper-B00wUuFF.js";import"./PolynomialTransform-CeuClFLJ.js";import"./TilemapCache-C4tcvL45.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./GraphicsLayer-B2JC83UW.js";import"./OrientedImageryLayer-BJ2QFfLf.js";import"./requestPresets-BbUE9oCD.js";import"./Circle-BB08Wuoo.js";import"./geodesicUtils-BOUsTR0r.js";import"./lineSegment-DbTVMGoh.js";import"./sphere-BgvJtIjV.js";import"./ElevationLayer-DjnPzjXZ.js";import"./ArcGISCachedService-Ck_c4zTW.js";import"./TileInfoTilemapCache-D02BJTXT.js";import"./LercDecoder-BGMljx8H.js";import"./WorkerHandle-CXxGr93G.js";import"./ImageryLayer-Dimcsfbr.js";import"./imageBitmapUtils-Bs4FbqLw.js";import"./executeQueryJSON-BvKan1w-.js";import"./query-Ct_ioWiz.js";import"./pbfQueryUtils-BfYlzyKp.js";import"./pbf-W1xbSZIX.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./AttachmentInfo-rwMSayzj.js";import"./executeForIds-CQINWF9R.js";import"./ElevationSamplerData-k1b1ey21.js";import"./ElevationTile-nLRXAw2j.js";import"./Viewshed.glsl-D2C0nY_-.js";import"./WaterSurface.glsl-BrdOaNHj.js";import"./RenderGeometry-BYg-7xwk.js";import"./vec3f32-Cw9Q6TO_.js";import"./Texture-1xthaLvE.js";import"./Matrix4PassUniform-BH4JqvtO.js";import"./interfaces-B8ge7Jg9.js";import"./BindType-BmZEZMMh.js";import"./VertexAttribute-BnAa5VW0.js";import"./Util-D9KK83cB.js";import"./enums-BlUEVwJR.js";import"./Texture-Bq-Yp-pO.js";import"./basicInterfaces-wONHx_SN.js";import"./ShaderTechniqueConfiguration-D3UbJ2mX.js";import"./doublePrecisionUtils-B0owpBza.js";import"./Material-CL7oq3ds.js";import"./triangle-B-TmEFJd.js";import"./renderState-yUi34s5A.js";import"./requestImageUtils-CYZi7VGK.js";import"./orientedBoundingBox-Do1Vt1ct.js";import"./ElevationProvider-BU9L4pxM.js";import"./boundedPlane-xSVxcV1_.js";import"./verticalOffsetUtils-Bdqba6xa.js";import"./hydratedFeatures-Dp0VykK3.js";import"./projectVectorToVector-C51LtB8f.js";import"./frustum-Bdr-rFEQ.js";import"./weather-B3EDJgNZ.js";import"./Scheduler-DSoCN6Hr.js";import"./debugFlags-CX6JgPmI.js";import"./Float4DrawUniform-DSpHBPg2.js";import"./NestedMap-DgiGbX8E.js";import"./Octree-bjpgk3mA.js";import"./InterleavedLayout-D5nIvpjN.js";import"./types-D0PSWh4d.js";import"./floatRGBA-BcMV1NFr.js";import"./Intersector-Dzvq-gms.js";import"./glUtil-C6KhMg1m.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-DJNUJ_t_.js";import"./BufferObject-CLFFt1Oe.js";import"./ColorMaterial.glsl-r8qsLxA-.js";import"./VertexColor.glsl-DMQrT1G9.js";import"./dehydratedFeatures-ONP9sBF3.js";import"./featureConversionUtils-CGYMoz5K.js";import"./edgeUtils-7PCAzCge.js";import"./DecodeSymbolColor.glsl-BR7HIChu.js";import"./SnappingCandidate-O5eRSE6e.js";import"./Normals-FPkG6ULP.js";import"./objectResourceUtils-AgE6Mx7R.js";import"./devEnvironmentUtils-D6qIi8Ky.js";import"./DefaultMaterial_COLOR_GAMMA-iPR_ZT6p.js";import"./resourceUtils-Cd4X6-Sw.js";import"./CIMSymbolHelper-RNagakW-.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-BN6jNuTX.js";import"./GeometryUtils-ClkMWevA.js";import"./enums-BRXbslMp.js";import"./definitions-ByNBSgP9.js";import"./Rect-CUzevAry.js";import"./BoundingBox-Dn8AJClK.js";import"./lineStippleUtils-DdOUX39J.js";import"./projectVectorToPoint-sjRZ-2WD.js";import"./DefaultLayouts-DkwmdUjQ.js";import"./webStyleSymbolUtils-BLz2G3ck.js";import"./Intersector-juYjkWfX.js";import"./RenderCoordsHelper-BbU_hNrx.js";import"./scaleUtils-DL5-S4xE.js";import"./viewpointUtils-t8HSs1zS.js";import"./earthUtils-B4BKKXMy.js";import"./spatialReferenceSupport-BIiDjE2t.js";import"./terrainUtils-BzcC3xJT.js";import"./Environment-zbroFpii.js";import"./quantityUtils-B2xRWNSM.js";import"./Program-C3FgCIV9.js";import"./ShadowCastVisualizeTechniqueConfiguration-DXK-OiGG.js";import"./euclideanLengthMeasurementUtils-D2ZslYzK.js";import"./ray-8l9wECN6.js";import"./ZoomMomentumEstimator-COZR6STZ.js";import"./labelFormatUtils-DkVwf7tJ.js";import"./FeatureTileDescriptor3D-DtDBB7rP.js";import"./elevationInfoUtils-Dkzy2V0O.js";import"./ElevationQueryTileCache-BEPYiqMG.js";import"./LayerConstants-B33OP6sh.js";import"./ElevationRange-BrgM1moX.js";import"./geometryServiceUtils-DujY2RdF.js";import"./project-gQLDAKs4.js";import"./hitTestSelectUtils-UXJPjatw.js";import"./RenderableTile-Co1N3tXi.js";import"./enums-BRzLM11V.js";import"./config-MDUrh2eL.js";import"./TiledDisplayObject-wW3wbRrm.js";import"./DisplayObject-COGNSicI.js";import"./StyleDefinition-BK3ROBTO.js";import"./resources-DkiY2wAJ.js";import"./edgeProcessing-BaVy8Gc3.js";import"./testSVGPremultipliedAlpha-pEtBKrma.js";import"./RenderingContext-B8FOG7Ha.js";import"./ProgramCache-NPIMJ8lZ.js";import"./layerViewUtils-D2JqIDZ8.js";import"./vmEvent-D4Ubqkbq.js";import"./geometryEngine-s82Uc-OG.js";import"./geometryEngineBase-hNmXf8AX.js";import"./hydrated-CC1UoCrK.js";class Jo{constructor(c){this.viewModel=c,this.createFootprints=async m=>{const{coverageFrustums:r,currentBestFeature:i,isAdditionalCoverageVisible:a,view:o}=this.viewModel,e=r.filter(V);for(const p of e){let t=p.clone();if(!o.spatialReference.equals(t.spatialReference)){const{components:s,spatialReference:l,origin:n,vertexAttributes:h,vertexSpace:v}=t;if(v.type==="local"){const u=await R(n,o.spatialReference,m);d(m),t.centerAt(u)}else{const u=h.position,y=Float64Array.from(await k([...u],l.clone(),o.spatialReference.clone(),m));d(m),t=new I({vertexAttributes:new j({position:y}),components:s,spatialReference:o.spatialReference.clone()})}}p.imageID===i.attributes.objectId?this.viewModel.bestFeatureFootprint=new g({attributes:{imageID:p.imageID},geometry:t,symbol:F.clone(),visible:!1}):this.viewModel.additionalFootprints.push(new g({attributes:{imageID:p.imageID},geometry:t,symbol:B.clone(),visible:a}))}},this.updateFootprint=async(m,r)=>{const{currentBestFeature:i,imagePointsInView:a,activeViewer:o,footprintExtent:e,view:p}=this.viewModel,t=$(I,this.viewModel.getCurrentBestFeaturePolygon().geometry),s=o==null?void 0:o.imageSize;if(!(i&&t&&a&&s&&e))return;const{cameraHeight:l,location:n,cameraPitch:h,horizontalFieldOfView:v,verticalFieldOfView:u,cameraRoll:y,imageRotation:A}=i.attributes,P=n.toArray(),{vertexAttributes:{position:x},spatialReference:z}=t,O=await T(x,z,n.spatialReference),C=await H(m,{feature:i,imageProperties:{width:s[0],height:s[1]},options:r,footprintExtent:e});d(r);let w=C.filter(V);if(!w.length)return;w[0].spatialReference.equals(n.spatialReference)||(w=await Promise.all(w.map(async f=>{const b=await R(f,n.spatialReference,r);return d(r),b})));const D=await q(a.slice(0,4).map(({x:f,y:b})=>[f,b]),w.slice(0,4).map(f=>f.toArray()),{cameraHeight:l,cameraLocation:P,cameraPitch:h,frustumVertices:O,horizontalFieldOfView:v,imageHeight:s[1],imageWidth:s[0],inSRS:{wkid:n.spatialReference.wkid},outSRS:{wkid:p.spatialReference.wkid},verticalFieldOfView:u,cameraRoll:y??0,imageRotation:A??0,options:r});this.viewModel.updateCurrentCoveragePolygon(new g({attributes:{imageID:i.attributes.objectId},geometry:D,symbol:F.clone(),visible:this.viewModel.currentCoverageVisible}))},this.updateFootprintPanorama=async(m,r)=>{var l;await E(r);const{horizontalFieldOfView:i,pitch:a,verticalFieldOfView:o,yaw:e}=m,p=(l=this.viewModel.currentBestFeature)==null?void 0:l.clone();if(!p)return;const{attributes:t}=p;t.orientedImageryType=null,t.cameraHeading=(e+t.cameraHeading)%360,t.cameraPitch=a,t.horizontalFieldOfView=i,t.verticalFieldOfView=o,t.cameraRoll=0;const{frustum:s}=L(t);s&&this.viewModel.updateCurrentCoveragePolygon(new g({attributes:{imageID:t.objectId},geometry:s,symbol:F.clone(),visible:this.viewModel.currentCoverageVisible}))}}updateGroundElevation(c,m){const{geometry:r}=this.viewModel.currentBestFeature,i=m.queryElevation(r);c.forEach(a=>{const{geometry:o}=a;switch(o==null?void 0:o.type){case"mesh":{const{vertexAttributes:{position:e}}=o,p=Math.floor(e.length/3);for(let t=0;t<p;t+=1)e[3*t+2]+=(i==null?void 0:i.z)??0;break}case"point":o.z=(o.z??0)+((i==null?void 0:i.z)??0)}})}}async function T(M,c,m,r){return Float64Array.from((await Promise.all(M.reduce((i,a,o)=>{const e=Math.floor(o/3);return i[e]=i[e]??[],i[e].push(a),i},new Array).map(async i=>(await R(new S(i,c),m,r)).toArray()))).flat())}export{Jo as default};
