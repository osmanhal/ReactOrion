{"version":3,"names":["CSS","offset","hourToMinutes","timeZoneNameBlockList","timeZoneOffsetToDecimal","shortOffsetTimeZoneName","minusSign","hyphen","replace","toOffsetValue","timeZoneName","referenceDateInMs","getTimeZoneShortOffset","Number","getUserTimeZoneOffset","localDate","Date","getTimezoneOffset","getUserTimeZoneName","dateFormatter","Intl","DateTimeFormat","resolvedOptions","timeZone","async","createTimeZoneItems","locale","messages","mode","referenceDate","standardTime","groupByName","import","groups","map","label","toUserFriendlyName","value","filterValue","filter","group","sort","effectiveLocale","getTime","groupByRegion","getCountry","Promise","all","region","tzs","items","decimalOffset","getTimeZoneLabel","metadata","country","groupA","groupB","localeCompare","groupByOffset","DateEngine","dateEngine","groupDateRange","startDate","toISOString","listFormatter","ListFormat","style","type","forEach","indexOffsets","removedSoFar","tz","index","includes","labelTzIdx","length","groupRepTz","tzLabels","createTimeZoneOffsetLabel","format","getCity","getSelectedRegionTimeZoneLabel","city","template","timeZoneRegionLabel","getMessageOrKeyFallback","key","split","pop","offsetLabel","groupLabel","timeZoneLabel","now","dateTimeFormat","getDateTimeFormat","parts","formatToParts","find","isGroup","item","undefined","flattenTimeZoneItems","timeZoneItems","flatMap","findTimeZoneItemByProp","prop","valueToMatch","inputTimeZoneCss","CalciteInputTimeZoneStyle0","InputTimeZone","this","setComboboxRef","el","comboboxEl","onComboboxBeforeClose","event","stopPropagation","overrideSelectedLabelForRegion","calciteInputTimeZoneBeforeClose","emit","onComboboxBeforeOpen","calciteInputTimeZoneBeforeOpen","onComboboxChange","combobox","target","selectedItem","selectedItems","selectedTimeZoneItem","calciteInputTimeZoneChange","selected","findTimeZoneItemByLabel","textLabel","selectedValue","onComboboxClose","open","calciteInputTimeZoneClose","onComboboxOpen","calciteInputTimeZoneOpen","valid","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","onMessagesChange","handleTimeZoneItemPropsChange","updateTimeZoneItemsAndSelection","handleValueChange","oldValue","normalizeValue","clearable","timeZoneItem","findTimeZoneItem","setFocus","componentFocusable","effectiveLocaleWatcher","updateMessages","onLabelClick","fallbackValue","offsetStyle","connectedCallback","connectForm","connectLabel","connectLocalized","connectMessages","disconnectedCallback","disconnectForm","disconnectLabel","disconnectLocalized","disconnectMessages","componentWillLoad","setUpLoadableComponent","setUpMessages","afterConnectDefaultValueSet","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","render","h","Host","InteractiveContainer","disabled","clearDisabled","chooseTimeZone","lang","maxItems","onCalciteComboboxBeforeClose","onCalciteComboboxBeforeOpen","onCalciteComboboxChange","onCalciteComboboxClose","onCalciteComboboxOpen","overlayPositioning","placeholder","namePlaceholder","offsetPlaceholder","regionPlaceholder","placeholderIcon","readOnly","ref","scale","selectionMode","status","validationIcon","validationMessage","renderItems","HiddenFormInputSlot","component","renderRegionItems","description","class","slot"],"sources":["src/components/input-time-zone/resources.ts","src/components/input-time-zone/utils.ts","src/components/input-time-zone/input-time-zone.scss?tag=calcite-input-time-zone&encapsulation=shadow","src/components/input-time-zone/input-time-zone.tsx"],"sourcesContent":["export const CSS = {\n  offset: \"offset\",\n};\n","import { getDateTimeFormat, SupportedLocale } from \"../../utils/locale\";\nimport { OffsetStyle, TimeZone, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\n\nconst hourToMinutes = 60;\n\nconst timeZoneNameBlockList = [\n  \"CET\",\n  \"CST6CDT\",\n  \"EET\",\n  \"EST\",\n  \"EST5EDT\",\n  \"Factory\",\n  \"HST\",\n  \"MET\",\n  \"MST\",\n  \"MST7MDT\",\n  \"PST8PDT\",\n  \"UTC\",\n  \"WET\",\n];\n\nfunction timeZoneOffsetToDecimal(shortOffsetTimeZoneName: string): string {\n  const minusSign = \"âˆ’\";\n  const hyphen = \"-\";\n\n  return (\n    shortOffsetTimeZoneName\n      .replace(\":15\", \".25\")\n      .replace(\":30\", \".5\")\n      .replace(\":45\", \".75\")\n\n      // ensures decimal string representation is parseable\n      .replace(minusSign, hyphen)\n  );\n}\n\nfunction toOffsetValue(timeZoneName: TimeZone, referenceDateInMs: number): number {\n  // we use \"en-US\" to allow us to reliably remove the standard time token\n  const offset = getTimeZoneShortOffset(timeZoneName, \"en-US\", referenceDateInMs).replace(\"GMT\", \"\");\n\n  if (offset === \"\") {\n    return 0;\n  }\n\n  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;\n}\n\nexport function getUserTimeZoneOffset(): number {\n  const localDate = new Date();\n  return localDate.getTimezoneOffset() * -1;\n}\n\nexport function getUserTimeZoneName(): string {\n  const dateFormatter = new Intl.DateTimeFormat();\n  return dateFormatter.resolvedOptions().timeZone;\n}\n\nexport async function createTimeZoneItems(\n  locale: SupportedLocale,\n  messages: InputTimeZoneMessages,\n  mode: TimeZoneMode,\n  referenceDate: Date,\n  standardTime: OffsetStyle,\n): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n  if (mode === \"name\") {\n    const { groupByName } = await import(\"timezone-groups/dist/groupByName/index.mjs\");\n    const groups = await groupByName();\n\n    return groups\n      .map<TimeZoneItem<string>>(({ label: timeZone }) => {\n        const label = toUserFriendlyName(timeZone);\n        const value = timeZone;\n\n        return {\n          label,\n          value,\n          filterValue: timeZone,\n        };\n      })\n      .filter((group) => !!group)\n      .sort();\n  }\n\n  const effectiveLocale =\n    standardTime === \"user\"\n      ? locale\n      : // we use locales that will always yield a short offset that matches `standardTime`\n        standardTime === \"utc\"\n        ? \"fr\"\n        : \"en-GB\";\n  const referenceDateInMs: number = referenceDate.getTime();\n\n  if (mode === \"region\") {\n    const [{ groupByRegion }, { getCountry }] = await Promise.all([\n      import(\"timezone-groups/dist/groupByRegion/index.mjs\"),\n      import(\"timezone-groups/dist/utils/country.mjs\"),\n    ]);\n    const groups = await groupByRegion();\n\n    return groups\n      .map<TimeZoneItemGroup>(({ label: region, tzs }) => {\n        return {\n          label: region,\n          items: tzs.map((timeZone) => {\n            const decimalOffset = timeZoneOffsetToDecimal(\n              getTimeZoneShortOffset(timeZone, effectiveLocale, referenceDateInMs),\n            );\n\n            return {\n              label: getTimeZoneLabel(timeZone, messages),\n              value: timeZone,\n              filterValue: toUserFriendlyName(timeZone),\n              metadata: {\n                offset: decimalOffset,\n                country: getCountry(timeZone),\n              },\n            };\n          }),\n        };\n      })\n      .sort((groupA, groupB) => groupA.label.localeCompare(groupB.label));\n  }\n\n  const [{ groupByOffset }, { DateEngine }] = await Promise.all([\n    import(\"timezone-groups/dist/groupByOffset/index.mjs\"),\n    import(\"timezone-groups/dist/groupByOffset/strategy/native/index.mjs\"),\n  ]);\n\n  const groups = await groupByOffset({\n    dateEngine: new DateEngine(),\n    groupDateRange: 1,\n    startDate: new Date(referenceDateInMs).toISOString(),\n  });\n\n  const listFormatter = new Intl.ListFormat(locale, { style: \"long\", type: \"conjunction\" });\n\n  // we remove blocked entries from tzs and adjust label indices accordingly\n  groups.forEach((group) => {\n    const indexOffsets: number[] = [];\n    let removedSoFar = 0;\n\n    group.tzs.forEach((tz, index) => {\n      if (timeZoneNameBlockList.includes(tz)) {\n        removedSoFar++;\n      }\n      indexOffsets[index] = removedSoFar;\n    });\n\n    group.tzs = group.tzs.filter((tz) => !timeZoneNameBlockList.includes(tz));\n\n    group.labelTzIdx = group.labelTzIdx\n      .map((index) => index - indexOffsets[index])\n      .filter((index) => index >= 0 && index < group.tzs.length);\n  });\n\n  return groups\n    .map<TimeZoneItem<number>>(({ labelTzIdx, tzs }) => {\n      const groupRepTz = tzs[0];\n      const decimalOffset = timeZoneOffsetToDecimal(\n        getTimeZoneShortOffset(groupRepTz, effectiveLocale, referenceDateInMs),\n      );\n      const value = toOffsetValue(groupRepTz, referenceDateInMs);\n      const tzLabels = labelTzIdx.map((index: number) => getTimeZoneLabel(tzs[index], messages));\n      const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));\n\n      return {\n        label,\n        value,\n        filterValue: tzs.map((tz) => toUserFriendlyName(tz)),\n      };\n    })\n    .filter((group) => !!group)\n    .sort((groupA, groupB) => groupA.value - groupB.value);\n}\n\nfunction getTimeZoneLabel(timeZone: string, messages: InputTimeZoneMessages): string {\n  return messages[timeZone] || getCity(timeZone);\n}\n\nexport function getSelectedRegionTimeZoneLabel(city: string, country: string, messages: InputTimeZoneMessages): string {\n  const template = messages.timeZoneRegionLabel;\n  return template.replace(\"{city}\", city).replace(\"{country}\", getMessageOrKeyFallback(messages, country));\n}\n\nexport function getMessageOrKeyFallback(messages: InputTimeZoneMessages, key: string): string {\n  return messages[key] || key;\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function getCity(timeZone: string): string {\n  return timeZone.split(\"/\").pop();\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function toUserFriendlyName(timeZoneName: string): string {\n  return timeZoneName.replace(/_/g, \" \");\n}\n\nfunction createTimeZoneOffsetLabel(messages: InputTimeZoneMessages, offsetLabel: string, groupLabel: string): string {\n  return messages.timeZoneLabel.replace(\"{offset}\", offsetLabel).replace(\"{cities}\", groupLabel);\n}\n\nfunction getTimeZoneShortOffset(\n  timeZone: TimeZone,\n  locale: SupportedLocale,\n  referenceDateInMs: number = Date.now(),\n): string {\n  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: \"shortOffset\" });\n  const parts = dateTimeFormat.formatToParts(referenceDateInMs);\n  return parts.find(({ type }) => type === \"timeZoneName\").value;\n}\n\nfunction isGroup(item: TimeZoneItem | TimeZoneItemGroup): item is TimeZoneItemGroup {\n  return (item as TimeZoneItemGroup).items !== undefined;\n}\n\nfunction flattenTimeZoneItems(timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[]): TimeZoneItem[] {\n  return isGroup(timeZoneItems[0]) ? timeZoneItems.flatMap((item) => item.items) : timeZoneItems;\n}\n\nexport function findTimeZoneItemByProp(\n  timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[],\n  prop: string,\n  valueToMatch: string | number | null,\n): TimeZoneItem | null {\n  return valueToMatch == null\n    ? null\n    : flattenTimeZoneItems(timeZoneItems).find(\n        (item) =>\n          // intentional == to match string to number\n          item[prop] == valueToMatch,\n      );\n}\n",":host {\n  display: block;\n}\n\n.offset {\n  white-space: nowrap;\n}\n\n@include base-component();\n@include disabled();\n@include hidden-form-input();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { Scale, Status } from \"../interfaces\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  MutableValidityState,\n} from \"../../utils/form\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS } from \"./resources\";\nimport {\n  createTimeZoneItems,\n  findTimeZoneItemByProp,\n  getMessageOrKeyFallback,\n  getSelectedRegionTimeZoneLabel,\n  getUserTimeZoneName,\n  getUserTimeZoneOffset,\n} from \"./utils\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\nimport { OffsetStyle, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-input-time-zone\",\n  styleUrl: \"input-time-zone.scss\",\n  assetsDirs: [\"assets\"],\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class InputTimeZone\n  implements\n    FormComponent,\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty value (`null`) will be allowed as a `value`.\n   *\n   * When `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** Specifies the component's maximum number of options to display before displaying a scrollbar. */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTimeZoneMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTimeZoneMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * This specifies the type of `value` and the associated options presented to the user:\n   *\n   * Using `\"offset\"` will provide options that show timezone offsets.\n   *\n   * Using `\"name\"` will provide options that show the IANA time zone names.\n   *\n   * @default \"offset\"\n   */\n  @Prop({ reflect: true }) mode: TimeZoneMode = \"offset\";\n\n  @Watch(\"messages\")\n  @Watch(\"mode\")\n  @Watch(\"referenceDate\")\n  handleTimeZoneItemPropsChange(): void {\n    this.updateTimeZoneItemsAndSelection();\n  }\n\n  /**\n   * Specifies how the offset will be displayed, where\n   *\n   * `\"user\"` uses `UTC` or `GMT` depending on the user's locale,\n   * `\"gmt\"` always uses `GMT`, and\n   * `\"utc\"` always uses `UTC`.\n   *\n   * This only applies to the `offset` mode.\n   *\n   * @default \"user\"\n   */\n  @Prop({ reflect: true }) offsetStyle: OffsetStyle = \"user\";\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n   *\n   * It can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).\n   *\n   * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n   */\n  @Prop() referenceDate: Date | string;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n   *\n   * If no value is provided, the user's time zone offset will be selected by default.\n   *\n   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    value = this.normalizeValue(value);\n\n    if (!value && this.clearable) {\n      this.value = value;\n      this.selectedTimeZoneItem = null;\n      return;\n    }\n\n    const timeZoneItem = this.findTimeZoneItem(value);\n\n    if (!timeZoneItem) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.selectedTimeZoneItem = timeZoneItem;\n  }\n\n  /**\n   * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    await this.comboboxEl.setFocus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is requested to be closed and before the closing transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeClose: EventEmitter<void>;\n\n  /**\n   * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's `value` changes.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneChange: EventEmitter<void>;\n\n  /**\n   * Fires after the component is closed and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneClose: EventEmitter<void>;\n\n  /**\n   * Fires after the component is opened and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTimeZoneElement;\n\n  private comboboxEl: HTMLCalciteComboboxElement;\n\n  @State() defaultMessages: InputTimeZoneMessages;\n\n  defaultValue: InputTimeZone[\"value\"];\n\n  @State() effectiveLocale: SupportedLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleWatcher(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private selectedTimeZoneItem: TimeZoneItem;\n\n  private timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private setComboboxRef = (el: HTMLCalciteComboboxElement): void => {\n    this.comboboxEl = el;\n  };\n\n  /**\n   * Helps override the selected item's label for region mode outside of item rendering logic to avoid flickering text change\n   *\n   * @param open\n   * @private\n   */\n  private overrideSelectedLabelForRegion(open: boolean): void {\n    if (this.mode !== \"region\" || !this.selectedTimeZoneItem) {\n      return;\n    }\n\n    const { label, metadata } = this.selectedTimeZoneItem;\n    this.comboboxEl.selectedItems[0].textLabel = open\n      ? label\n      : getSelectedRegionTimeZoneLabel(label, metadata.country, this.messages);\n  }\n\n  private onComboboxBeforeClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(false);\n    this.calciteInputTimeZoneBeforeClose.emit();\n  };\n\n  private onComboboxBeforeOpen = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(true);\n    this.calciteInputTimeZoneBeforeOpen.emit();\n  };\n\n  private onComboboxChange = (event: CustomEvent): void => {\n    event.stopPropagation();\n    const combobox = event.target as HTMLCalciteComboboxElement;\n    const selectedItem = combobox.selectedItems[0];\n\n    if (!selectedItem) {\n      this.value = null;\n      this.selectedTimeZoneItem = null;\n      this.calciteInputTimeZoneChange.emit();\n      return;\n    }\n\n    const selected = this.findTimeZoneItemByLabel(selectedItem.textLabel);\n\n    const selectedValue = `${selected.value}`;\n\n    if (this.value === selectedValue && selected.label === this.selectedTimeZoneItem.label) {\n      return;\n    }\n\n    this.value = selectedValue;\n    this.selectedTimeZoneItem = selected;\n    this.calciteInputTimeZoneChange.emit();\n  };\n\n  private onComboboxClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.open = false;\n    this.calciteInputTimeZoneClose.emit();\n  };\n\n  private onComboboxOpen = (event: CustomEvent): void => {\n    this.open = true;\n    event.stopPropagation();\n    this.calciteInputTimeZoneOpen.emit();\n  };\n\n  private findTimeZoneItem(value: number | string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"value\", value);\n  }\n\n  private findTimeZoneItemByLabel(label: string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"label\", label);\n  }\n\n  private async updateTimeZoneItemsAndSelection(): Promise<void> {\n    this.timeZoneItems = await this.createTimeZoneItems();\n\n    if (this.value === \"\" && this.clearable) {\n      this.selectedTimeZoneItem = null;\n      return;\n    }\n\n    const fallbackValue = this.mode === \"offset\" ? getUserTimeZoneOffset() : getUserTimeZoneName();\n    const valueToMatch = this.value ?? fallbackValue;\n\n    this.selectedTimeZoneItem =\n      this.findTimeZoneItem(valueToMatch) || this.findTimeZoneItem(fallbackValue);\n  }\n\n  private async createTimeZoneItems(): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n    if (!this.effectiveLocale || !this.messages) {\n      return [];\n    }\n\n    return createTimeZoneItems(\n      this.effectiveLocale,\n      this.messages,\n      this.mode,\n      this.referenceDate instanceof Date\n        ? this.referenceDate\n        : new Date(this.referenceDate ?? Date.now()),\n      this.offsetStyle,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectForm(this);\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectForm(this);\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  private normalizeValue(value: string | null): string {\n    return value === null ? \"\" : value;\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n    this.value = this.normalizeValue(this.value);\n\n    await this.updateTimeZoneItemsAndSelection();\n\n    const selectedValue = this.selectedTimeZoneItem ? `${this.selectedTimeZoneItem.value}` : null;\n    afterConnectDefaultValueSet(this, selectedValue);\n    this.value = selectedValue;\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    this.overrideSelectedLabelForRegion(this.open);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <calcite-combobox\n            clearDisabled={!this.clearable}\n            disabled={this.disabled}\n            label={this.messages.chooseTimeZone}\n            lang={this.effectiveLocale}\n            maxItems={this.maxItems}\n            onCalciteComboboxBeforeClose={this.onComboboxBeforeClose}\n            onCalciteComboboxBeforeOpen={this.onComboboxBeforeOpen}\n            onCalciteComboboxChange={this.onComboboxChange}\n            onCalciteComboboxClose={this.onComboboxClose}\n            onCalciteComboboxOpen={this.onComboboxOpen}\n            open={this.open}\n            overlayPositioning={this.overlayPositioning}\n            placeholder={\n              this.mode === \"name\"\n                ? this.messages.namePlaceholder\n                : this.mode === \"offset\"\n                  ? this.messages.offsetPlaceholder\n                  : this.messages.regionPlaceholder\n            }\n            placeholderIcon=\"search\"\n            readOnly={this.readOnly}\n            ref={this.setComboboxRef}\n            scale={this.scale}\n            selectionMode={this.clearable ? \"single\" : \"single-persist\"}\n            status={this.status}\n            validation-icon={this.validationIcon}\n            validation-message={this.validationMessage}\n          >\n            {this.renderItems()}\n          </calcite-combobox>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  private renderItems(): VNode[] {\n    if (this.mode === \"region\") {\n      return this.renderRegionItems();\n    }\n\n    return this.timeZoneItems.map((group) => {\n      const selected = this.selectedTimeZoneItem === group;\n      const { label, value } = group;\n\n      return (\n        <calcite-combobox-item\n          data-value={value}\n          key={label}\n          selected={selected}\n          textLabel={label}\n          value={`${group.filterValue}`}\n        />\n      );\n    });\n  }\n\n  private renderRegionItems(): VNode[] {\n    return (this.timeZoneItems as TimeZoneItemGroup[]).flatMap(({ label, items }) => (\n      <calcite-combobox-item-group\n        key={label}\n        label={getMessageOrKeyFallback(this.messages, label)}\n      >\n        {items.map((item) => {\n          const selected = this.selectedTimeZoneItem === item;\n          const { label, value } = item;\n\n          return (\n            <calcite-combobox-item\n              data-value={value}\n              description={getMessageOrKeyFallback(this.messages, item.metadata.country)}\n              key={label}\n              metadata={item.metadata}\n              selected={selected}\n              textLabel={label}\n              value={`${item.filterValue}`}\n            >\n              <span class={CSS.offset} slot=\"content-end\">\n                {item.metadata.offset}\n              </span>\n            </calcite-combobox-item>\n          );\n        })}\n      </calcite-combobox-item-group>\n    ));\n  }\n}\n"],"mappings":"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","ignoreList":[]}