{"version":3,"names":["generateTimeZoneMetadata","timeZoneItems","map","tzItem","label","continent","extractContinent","isRegularContinent","async","groupByRegion","grouping","timeZones","tz","timeZoneMetadata","tzMetadatum","visited","newGroup","tzs","tzMetadatumJ","filter","_","labelJ","continentJ","isRegularContinentJ","push","group","sort","a","b","localeCompare"],"sources":["node_modules/timezone-groups/dist/groupByRegion/index.mjs"],"sourcesContent":["import { timeZones } from '../utils/time-zones.mjs';\nimport { extractContinent, isRegularContinent } from '../utils/continent.mjs';\n\nconst generateTimeZoneMetadata = (timeZoneItems) => {\n    return timeZoneItems.map((tzItem) => {\n        const { label } = tzItem;\n        const continent = extractContinent(label, true);\n        return {\n            ...tzItem,\n            continent,\n            isRegularContinent: isRegularContinent(continent),\n        };\n    });\n};\n\nasync function groupByRegion() {\n    const grouping = [];\n    const timeZoneItems = timeZones.map((tz) => ({ label: tz }));\n    const timeZoneMetadata = generateTimeZoneMetadata(timeZoneItems);\n    for (const tzMetadatum of timeZoneMetadata) {\n        const { label, continent, isRegularContinent } = tzMetadatum;\n        if (tzMetadatum.visited) {\n            continue;\n        }\n        tzMetadatum.visited = true;\n        if (!isRegularContinent) {\n            tzMetadatum.visited = true;\n            continue;\n        }\n        const newGroup = {\n            label: continent,\n            tzs: [{ label }],\n        };\n        for (const tzMetadatumJ of timeZoneMetadata.filter((_) => !_.visited)) {\n            const { label: labelJ, continent: continentJ, isRegularContinent: isRegularContinentJ, } = tzMetadatumJ;\n            if (continent === continentJ) {\n                const tzItem = { label: labelJ };\n                newGroup.tzs.push(tzItem);\n                tzMetadatumJ.visited = true;\n            }\n        }\n        grouping.push(newGroup);\n    }\n    return grouping\n        .map((group) => {\n        group.tzs = group.tzs.sort((a, b) => a.label.localeCompare(b.label));\n        return {\n            label: group.label,\n            tzs: group.tzs.map((_) => _.label),\n        };\n    })\n        .sort((a, b) => a.label.localeCompare(b.label));\n}\n\nexport { groupByRegion };\n"],"mappings":";;;;;+EAGA,MAAMA,EAA4BC,GACvBA,EAAcC,KAAKC,IACtB,MAAMC,MAAEA,GAAUD,EAClB,MAAME,EAAYC,EAAiBF,EAAO,MAC1C,MAAO,IACAD,EACHE,YACAE,mBAAoBA,EAAmBF,GAC1C,IAITG,eAAeC,IACX,MAAMC,EAAW,GACjB,MAAMT,EAAgBU,EAAUT,KAAKU,IAAE,CAAQR,MAAOQ,MACtD,MAAMC,EAAmBb,EAAyBC,GAClD,IAAK,MAAMa,KAAeD,EAAkB,CACxC,MAAMT,MAAEA,EAAKC,UAAEA,EAASE,mBAAEA,GAAuBO,EACjD,GAAIA,EAAYC,QAAS,CACrB,QACZ,CACQD,EAAYC,QAAU,KACtB,IAAKR,EAAoB,CACrBO,EAAYC,QAAU,KACtB,QACZ,CACQ,MAAMC,EAAW,CACbZ,MAAOC,EACPY,IAAK,CAAC,CAAEb,WAEZ,IAAK,MAAMc,KAAgBL,EAAiBM,QAAQC,IAAOA,EAAEL,UAAU,CACnE,MAAQX,MAAOiB,EAAQhB,UAAWiB,EAAYf,mBAAoBgB,GAAyBL,EAC3F,GAAIb,IAAciB,EAAY,CAC1B,MAAMnB,EAAS,CAAEC,MAAOiB,GACxBL,EAASC,IAAIO,KAAKrB,GAClBe,EAAaH,QAAU,IACvC,CACA,CACQL,EAASc,KAAKR,EACtB,CACI,OAAON,EACFR,KAAKuB,IACNA,EAAMR,IAAMQ,EAAMR,IAAIS,MAAK,CAACC,EAAGC,IAAMD,EAAEvB,MAAMyB,cAAcD,EAAExB,SAC7D,MAAO,CACHA,MAAOqB,EAAMrB,MACba,IAAKQ,EAAMR,IAAIf,KAAKkB,GAAMA,EAAEhB,QAC/B,IAEAsB,MAAK,CAACC,EAAGC,IAAMD,EAAEvB,MAAMyB,cAAcD,EAAExB,QAChD,Q","ignoreList":[]}