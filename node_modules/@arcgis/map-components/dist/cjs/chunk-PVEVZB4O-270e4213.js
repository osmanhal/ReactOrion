/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.7
 */
'use strict';

const index = require('./index-8d100f9f.js');
const index$1 = require('./index-c3c4ddd9.js');

// src/load.ts
var load = (loader) => index.makeController(loader);
var makeT9nController = (getAssetPath) => ({ blocking = false, name } = {}) => (
  // eslint-disable-next-line @typescript-eslint/promise-function-async
  index.makeController((component, controller) => {
    controller.onLifecycle(
      () => index$1.startLocaleObserver(
        component.el,
        getAssetPath("./assets"),
        ({ t9nLocale, t9nStrings, lang }) => {
          controller.exports = { ...t9nStrings, _lang: lang, _t9nLocale: t9nLocale };
          const label = t9nStrings.componentLabel ?? t9nStrings.widgetLabel;
          if (typeof label === "string" && "label" in component && component.label == null) {
            component.label ?? (component.label = label);
          }
        },
        name
      )
    );
    if (blocking) {
      return controller.ready;
    }
    const locale = index$1.getElementLocales(component.el);
    return { _lang: locale.lang, _t9nLocale: locale.t9nLocale };
  })
);

// src/usePropertyChange.ts
var usePropertyChange = (_component) => propertyChangeController;
var eventName = "arcgisPropertyChange";
var propertyChangeController = (...toWatch) => index.makeController((component, controller) => {
  const eventedComponent = component;
  if (component.manager.isLit) {
    eventedComponent[eventName] = {
      emit: (payload) => {
        const event = new CustomEvent(eventName, { detail: payload, cancelable: true });
        component.el.dispatchEvent(event);
        return event;
      }
    };
  }
  const eventEmitter = eventedComponent[eventName];
  controller.onLoad(
    () => controller.onLifecycle(
      () => toWatch.map(
        (name) => (
          // Casting to 'el' to simplify dynamic prop name typing
          component.manager.watch(name, () => eventEmitter.emit({ name }))
        )
      )
    )
  );
  return eventEmitter;
});

exports.load = load;
exports.makeT9nController = makeT9nController;
exports.usePropertyChange = usePropertyChange;
