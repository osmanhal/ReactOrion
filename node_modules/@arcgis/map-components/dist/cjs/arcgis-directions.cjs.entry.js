/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.7
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-eee1d83b.js');
const index$2 = require('./index-c3c4ddd9.js');
const componentUtils = require('./component-utils-387e34d8.js');
const chunkPVEVZB4O = require('./chunk-PVEVZB4O-270e4213.js');
const index$1 = require('./index-8d100f9f.js');
const useWidget = require('./useWidget-4ffee640.js');

const directionsCss = "";
const ArcgisDirectionsStyle0 = directionsCss;

const useDirectionsWidget = useWidget.makeWidgetController(index$2.newWidgetsDirections);
const loggerName = "map-components:arcgis-directions";
const ArcgisDirections = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this.manager = index$1.useControllerManager(this);
        this.widget = useDirectionsWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = chunkPVEVZB4O.usePropertyChange()("lastRoute", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.apiKey = this.widget.apiKey;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.routeLayerItemId = this.manager.getSet(undefined, {
            set: (value) => {
                if (componentUtils.isNullOrEmptyString(value)) {
                    this.widget.view?.map.remove(this.layer);
                    this._setDefaultLayer();
                }
                else if (value && this.widget) {
                    index$2.newLayersRouteLayer({
                        portalItem: {
                            id: value,
                        },
                    })
                        .then((layer) => {
                        this.layer = layer;
                    })
                        .catch(console.error);
                }
                return value;
            },
        });
        this.lastRoute = this.widget.lastRoute;
        this.layer = this.widget.layer;
        this.headingLevel = this.widget.headingLevel;
        this.maxStops = this.widget.maxStops;
        this.searchProperties = this.widget.searchProperties;
        this.unit = this.widget.unit;
        this.useDefaultRouteLayer = this.manager.getSet(false, {
            set: (newValue) => {
                this._setDefaultLayer();
                return newValue;
            },
        });
        this.hideLayerDetails = this.widget.visibleElements.layerDetails;
        this.hideSaveAsButton = this.widget.visibleElements.saveAsButton;
        this.hideSaveButton = this.widget.visibleElements.saveButton;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    /** Maintain a default route layer */
    _setDefaultLayer() {
        if (this.useDefaultRouteLayer) {
            index$2.newLayersRouteLayer({})
                .then((layer) => {
                this.layer = layer;
            })
                .catch(console.error);
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async getDirections() {
        if (this.widget?.viewModel?.state !== "ready") {
            throw new Error(`${loggerName} - component not ready to get directions`);
        }
        return await this.widget?.getDirections();
    }
    async save() {
        if (this.widget?.viewModel?.state !== "ready") {
            throw new Error(`${loggerName} - component not ready to save directions`);
        }
        return await this.widget?.save();
    }
    async saveAs(portalItem, options) {
        if (this.widget?.viewModel?.state !== "ready") {
            throw new Error(`${loggerName} - component not ready to save directions as a Portal Item`);
        }
        return await this.widget?.saveAs(portalItem, options);
    }
    async zoomToRoute() {
        if (this.widget?.viewModel?.state !== "ready") {
            throw new Error(`${loggerName} - component not ready to zoom to route`);
        }
        this.widget?.zoomToRoute();
    }
    get el() { return index.getElement(this); }
};
ArcgisDirections.style = ArcgisDirectionsStyle0;

exports.arcgis_directions = ArcgisDirections;
