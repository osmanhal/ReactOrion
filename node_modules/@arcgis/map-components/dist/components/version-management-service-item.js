/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.7
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './version-management-version-item.js';
import { d as defineCustomElement$1 } from './version-management-version-list.js';
import "@esri/calcite-components/dist/components/calcite-combobox.js";
import "@esri/calcite-components/dist/components/calcite-combobox-item.js";
import "@esri/calcite-components/dist/components/calcite-action.js";
import "@esri/calcite-components/dist/components/calcite-tooltip.js";
import "@esri/calcite-components/dist/components/calcite-block.js";

const ArcgisVersionManagementServiceItem = /*@__PURE__*/ proxyCustomElement(class ArcgisVersionManagementServiceItem extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisFlowItemBack = createEvent(this, "arcgisFlowItemBack", 7);
        this.arcgisFlowItemClose = createEvent(this, "arcgisFlowItemClose", 7);
        this.arcgisGetVersions = createEvent(this, "arcgisGetVersions", 7);
        this.arcgisManageVersion = createEvent(this, "arcgisManageVersion", 7);
        this.arcgisNewVersion = createEvent(this, "arcgisNewVersion", 7);
        this._versionListEventListeners = new Map();
        this._arcgisGetVersions = (event) => {
            this.arcgisGetVersions.emit(event.detail);
        };
        this._arcgisManageVersion = (event) => {
            this.arcgisManageVersion.emit(event.detail);
        };
        this._arcgisNewVersion = (event) => {
            this.arcgisNewVersion.emit(event.detail);
        };
        this.serviceItemElementProps = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    disconnectedCallback() {
        if (this._versionList) {
            this._removeVersionListEventListeners(this._versionList);
        }
    }
    render() {
        const { serviceItemElementProps: { allowEditing, closable, currentUser, executionError, currentVersionIdentifier, flowElement, hasAdvEditingUte, heading, isVersioningApiAvailable, pageSize, serviceName, serviceUrl, state, strings, versionInfos, }, } = this;
        let { _versionList: versionList } = this;
        const comboboxVersions = (h("calcite-combobox", { key: 'e80f4924dbd00f2a29140b91ee53369dff826d39', clearDisabled: true, label: serviceName, maxItems: 5, overlayPositioning: "fixed", selectionMode: "single-persist", onCalciteComboboxChange: (event) => {
                const node = event.target;
                const versionInfo = versionInfos.find((version) => version.versionIdentifier.guid === node.value);
                this.arcgisManageVersion.emit({ actionType: "changeVersion", serviceUrl, versionInfo });
            } }, versionInfos
            ? versionInfos.map((versionInfo) => (h("calcite-combobox-item", { selected: currentVersionIdentifier.guid === versionInfo.versionIdentifier.guid &&
                    currentVersionIdentifier.name === versionInfo.versionIdentifier.name, textLabel: versionInfo.versionIdentifier.name, value: versionInfo.versionIdentifier.guid })))
            : undefined));
        let actionManageVersions;
        let tooltipManageVersions;
        if (allowEditing) {
            actionManageVersions = (h("calcite-action", { key: 'fc6779c583aa81cf1f12584bda094b7d0d25dd06', id: `actionManageVersions_${serviceName}`, icon: "list", scale: "s", slot: "control", text: "", onClick: async () => {
                    versionList = document.createElement("arcgis-version-management-version-list");
                    versionList.versionListElementProps = {
                        closable,
                        currentUser,
                        currentVersionIdentifier,
                        executionError,
                        hasAdvEditingUte,
                        heading,
                        isVersioningApiAvailable,
                        pageSize,
                        serviceName,
                        serviceUrl,
                        state,
                        strings,
                        versionInfos,
                    };
                    versionList.addEventListener("calciteFlowItemBack", (e) => {
                        e.preventDefault();
                        this.arcgisFlowItemBack.emit();
                    });
                    versionList.addEventListener("calciteFlowItemClose", () => {
                        this.arcgisFlowItemClose.emit();
                    });
                    this._addVersionListEventListeners(versionList);
                    flowElement.append(versionList);
                } }));
            tooltipManageVersions = (h("calcite-tooltip", { key: '5d9377d1bec63e4c3d310a3941c0ad693e81f48b', overlayPositioning: "fixed", referenceElement: `actionManageVersions_${serviceName}` }, h("span", { key: 'ce2e9fc08127e075738fb2cc59fa5387343eda50' }, strings.headers.manageVersions)));
        }
        return (h("calcite-block", { key: '357a2c3e708f61505efa5e1a8f82a7c8ab4ac8dd', open: true, heading: serviceName }, comboboxVersions, actionManageVersions, tooltipManageVersions));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addVersionListEventListeners(versionList) {
        versionList.addEventListener("arcgisGetVersions", this._arcgisGetVersions);
        this._versionListEventListeners.set("arcgisGetVersions", this._arcgisGetVersions);
        versionList.addEventListener("arcgisManageVersion", this._arcgisManageVersion);
        this._versionListEventListeners.set("arcgisManageVersion", this._arcgisManageVersion);
        versionList.addEventListener("arcgisNewVersion", this._arcgisNewVersion);
        this._versionListEventListeners.set("arcgisNewVersion", this._arcgisNewVersion);
    }
    _removeVersionListEventListeners(versionList) {
        for (const [type, listener] of this._versionListEventListeners) {
            versionList.removeEventListener(type, listener);
        }
    }
    get el() { return this; }
}, [0, "arcgis-version-management-service-item", {
        "serviceItemElementProps": [16]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-version-management-service-item", "arcgis-version-management-version-item", "arcgis-version-management-version-list"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-version-management-service-item":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisVersionManagementServiceItem);
            }
            break;
        case "arcgis-version-management-version-item":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "arcgis-version-management-version-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisVersionManagementServiceItem as A, defineCustomElement as d };
