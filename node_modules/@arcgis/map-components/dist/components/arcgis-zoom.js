/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.7
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { l as load, u as usePropertyChange } from './chunk-PVEVZB4O.js';
import { u as useControllerManager } from './index3.js';
import { h as importCoreReactiveUtils, ai as newWidgetsZoom } from './index2.js';
import { m as makeWidgetController } from './useWidget.js';

const zoomCss = "arcgis-zoom{}";
const ArcgisZoomStyle0 = zoomCss;

const useZoomWidget = makeWidgetController(newWidgetsZoom);
const __cmpMeta = [0,"arcgis-zoom",{"referenceElement":[1025,"reference-element"],"icon":[1025],"label":[1025],"layout":[1537],"position":[1025],"state":[1537],"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"destroy":[64],"zoomIn":[64],"zoomOut":[64]}];
const ArcgisZoom$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisZoom extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this,forceUpdate);
        //--------------------------------------------------------------------------
        //
        //  Properties
        //
        //--------------------------------------------------------------------------
        this.widget = useZoomWidget(this);
        this.viewModel = this.widget.viewModel;
        this.reactiveUtils = load(importCoreReactiveUtils);
        this.arcgisPropertyChange = usePropertyChange()("state");
        this.referenceElement = undefined;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.layout = this.widget.layout;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
        this.autoDestroyDisabled = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async zoomIn() {
        this.widget?.viewModel.zoomIn();
    }
    async zoomOut() {
        this.widget?.viewModel.zoomOut();
    }
    get el() { return this; }
    static get style() { return ArcgisZoomStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-zoom"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-zoom":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisZoom$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisZoom = ArcgisZoom$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisZoom, defineCustomElement };
