/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.30/esri/copyright.txt for details.
 * v4.30.7
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import "@esri/calcite-components/dist/components/calcite-button.js";
import "@esri/calcite-components/dist/components/calcite-label.js";
import "@esri/calcite-components/dist/components/calcite-chip-group.js";
import "@esri/calcite-components/dist/components/calcite-chip.js";
import "@esri/calcite-components/dist/components/calcite-text-area.js";
import "@esri/calcite-components/dist/components/calcite-input-text.js";
import "@esri/calcite-components/dist/components/calcite-checkbox.js";
import "@esri/calcite-components/dist/components/calcite-flow-item.js";
import "@esri/calcite-components/dist/components/calcite-panel.js";
import "@esri/calcite-components/dist/components/calcite-block.js";

const ArcgisVersionManagementVersionProperties = /*@__PURE__*/ proxyCustomElement(class ArcgisVersionManagementVersionProperties extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisAlterVersion = createEvent(this, "arcgisAlterVersion", 7);
        this.arcgisCreateVersion = createEvent(this, "arcgisCreateVersion", 7);
        this.arcgisFlowItemBack = createEvent(this, "arcgisFlowItemBack", 7);
        this.arcgisFlowItemClose = createEvent(this, "arcgisFlowItemClose", 7);
        this._switchToVersion = true;
        this._handleCancel = () => {
            this.arcgisFlowItemBack.emit();
        };
        this._handleChange = (event) => {
            const { _mode: mode, _ownerName: ownerName, _versionName: versionName, versionPropertiesElementProps: { currentUser, serviceUrl, versionInfo }, } = this;
            let { _alterVersionParameters: alterVersionParameters, _createVersionParameters: createVersionParameters } = this;
            if (mode === "create") {
                if (!createVersionParameters) {
                    createVersionParameters = {
                        access: "public",
                        description: "",
                        featureServerUrl: serviceUrl,
                        ownerName: currentUser.toUpperCase(),
                        versionName: "",
                    };
                }
            }
            if (mode === "edit") {
                if (!alterVersionParameters) {
                    alterVersionParameters = {
                        featureServerUrl: serviceUrl,
                        versionIdentifier: versionInfo.versionIdentifier,
                        ownerName,
                        versionName,
                        access: versionInfo.access,
                        description: versionInfo.description,
                    };
                }
            }
            switch (event.type) {
                case "calciteChipGroupSelect": {
                    const name = event.target.label;
                    const value = event.target.selectedItems[0].value;
                    if (mode === "create") {
                        createVersionParameters = { ...createVersionParameters, ...{ [name]: value } };
                    }
                    if (mode === "edit") {
                        alterVersionParameters = { ...alterVersionParameters, ...{ [name]: value } };
                    }
                    break;
                }
                case "calciteInputTextInput": {
                    const name = event.target.name;
                    const value = event.target.value;
                    if (mode === "create") {
                        createVersionParameters = { ...createVersionParameters, ...{ [name]: value } };
                    }
                    if (mode === "edit") {
                        alterVersionParameters = { ...alterVersionParameters, ...{ [name]: value } };
                    }
                    break;
                }
                case "calciteTextAreaInput": {
                    const name = event.target.name;
                    const value = event.target.value;
                    if (mode === "create") {
                        createVersionParameters = { ...createVersionParameters, ...{ [name]: value } };
                    }
                    if (mode === "edit") {
                        alterVersionParameters = { ...alterVersionParameters, ...{ [name]: value } };
                    }
                    break;
                }
            }
            if (mode === "create") {
                if (createVersionParameters.access !== "public" &&
                    currentUser.toUpperCase() !== createVersionParameters.ownerName?.toUpperCase()) {
                    this.switchToVersionCheckboxElement.checked = false;
                    this.switchToVersionCheckboxElement.disabled = true;
                }
                else {
                    this.switchToVersionCheckboxElement.disabled = false;
                }
                this._createVersionParameters = createVersionParameters;
            }
            if (mode === "edit") {
                this._alterVersionParameters = alterVersionParameters;
            }
        };
        this._handleClose = () => {
            this.arcgisFlowItemClose.emit();
        };
        this._handleSave = () => {
            const { _alterVersionParameters: alterVersionParameters, _createVersionParameters: createVersionParameters, _mode: mode, _switchToVersion: switchToVersion, } = this;
            if (mode === "create") {
                this.arcgisCreateVersion.emit({
                    createVersionParameters,
                    switchToVersion,
                });
            }
            if (mode === "edit") {
                this.arcgisAlterVersion.emit({
                    alterVersionParameters,
                });
            }
        };
        this._handleSwitchToVersionChange = (event) => {
            this._switchToVersion = event.target.checked;
        };
        this.versionPropertiesElementProps = undefined;
    }
    async componentWillLoad() {
        const { versionPropertiesElementProps: { versionInfo }, } = this;
        if (versionInfo) {
            this._mode = "edit";
            this._fullVersionName = versionInfo.versionIdentifier.name;
            this._ownerName = this._fullVersionName.substring(0, this._fullVersionName.lastIndexOf(".")).toUpperCase();
            this._versionName = this._fullVersionName.substring(this._fullVersionName.lastIndexOf(".") + 1);
        }
        else {
            this._mode = "create";
        }
    }
    componentDidRender() {
        if (this._mode === "create") {
            this.versionNameInputElement?.setFocus();
        }
    }
    render() {
        const { versionPropertiesElementProps: { closable, currentUser, hasAdvEditingUte, state, strings, versionInfo }, _mode: mode, _ownerName: ownerName, _versionName: versionName, } = this;
        const buttons = (h("div", { key: '135d4141e995bbf31123c16d900a1e274575aafb' }, h("calcite-button", { key: '44a78143d595fe108d1d312da6ba1bf340be77b8', appearance: "outline", slot: "footer", width: "half", onClick: this._handleCancel }, strings.actions.cancelSave), h("calcite-button", { key: '30b32b985a16d7841a444e638309b914cac1b406', slot: "footer", width: "half", onClick: this._handleSave }, strings.actions.saveVersion)));
        const chipGroupAccessLevel = (h("calcite-label", { key: 'fb496917361a78043ca219cdb438f30414dd5acd' }, strings.input.versionAccess, h("calcite-chip-group", { key: 'f81920bbcdc1bd18187b8107d039cd2a61b8e4dc', label: "access", onCalciteChipGroupSelect: this._handleChange, selectionMode: "single-persist" }, h("calcite-chip", { key: '9e55255b9114d1d239a17248ccd200fd097af5f2', selected: (mode === "edit" && versionInfo.access === "public") || mode === "create", value: "public" }, strings.accessLevels.public), h("calcite-chip", { key: '03374352be5cfff98f80bb915fe75be762078258', selected: mode === "edit" && versionInfo.access === "protected", value: "protected" }, strings.accessLevels.protected), h("calcite-chip", { key: '452499aeb04c69b51101b774d91c0479753cf43b', selected: mode === "edit" && versionInfo.access === "private", value: "private" }, strings.accessLevels.private))));
        const inputDescription = (h("calcite-label", { key: '11c04b89dfd8d85b68d322d552ece3bf5cc35567' }, strings.input.versionDescription, h("calcite-text-area", { key: '469568f5e6f902076338f1e7a99332d724ff54da', name: "description", onCalciteTextAreaInput: this._handleChange, resize: "vertical", value: mode === "edit" ? versionInfo.description : "" })));
        const inputName = (h("calcite-label", { key: '14b2dabc65093f576b8ebca98cec745210353c0b' }, strings.input.versionName, h("calcite-input-text", { key: '04c0d47377ea59031fa88c38b996203b0d7c9175', ref: (node) => {
                this.versionNameInputElement = node;
            }, name: "versionName", onCalciteInputTextInput: this._handleChange, maxLength: 62, value: mode === "edit" ? versionName : "" })));
        const inputOwner = (h("calcite-label", { key: 'b1773ab9fd4183852b522f465a6ba5347934c358' }, strings.input.versionOwner, h("calcite-input-text", { key: 'e62366ef2e7c143e9f63be1ae177a6b1a3639bce', name: "ownerName", onCalciteInputTextInput: this._handleChange, disabled: !hasAdvEditingUte, value: mode === "edit" ? ownerName : currentUser.toUpperCase() })));
        const switchToVersionCheckbox = mode === "create" ? (h("calcite-label", { layout: "inline" }, h("calcite-checkbox", { ref: (node) => {
                this.switchToVersionCheckboxElement = node;
            }, checked: true, name: "switchToVersion", onCalciteCheckboxChange: this._handleSwitchToVersionChange }), strings.actions.switchToVersion)) : undefined;
        return (h("calcite-flow-item", { key: '79059091093b6a5c977b43c2530db56f86c98133', closable: closable, description: versionInfo ? versionInfo.versionIdentifier.name : "", heading: versionInfo ? strings.actions.editVersion : strings.actions.newVersion, onCalciteFlowItemClose: this._handleClose }, h("calcite-panel", { key: '0eecfe1d97445089ef205e3c4dc569a23edc863c', loading: state === "executing" }, h("calcite-block", { key: 'ae61afab2e9d622c41d4b2e0f833057ceba024e0', heading: "", open: true }, inputName, inputDescription, chipGroupAccessLevel, inputOwner, switchToVersionCheckbox, buttons))));
    }
    get el() { return this; }
}, [0, "arcgis-version-management-version-properties", {
        "versionPropertiesElementProps": [16]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-version-management-version-properties"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-version-management-version-properties":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisVersionManagementVersionProperties);
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisVersionManagementVersionProperties as A, defineCustomElement as d };
