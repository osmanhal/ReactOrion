"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/accessor/index.ts
var accessor_exports = {};
__export(accessor_exports, {
  AccessorController: () => AccessorController,
  ReactiveUtilsIntegration: () => ReactiveUtilsIntegration,
  accessorSupport: () => accessorSupport,
  makeAccessorController: () => makeAccessorController,
  useReactiveUtilsIntegration: () => useReactiveUtilsIntegration
});
module.exports = __toCommonJS(accessor_exports);

// src/accessor/useAccessor.ts
var import_core_adapter = require("@arcgis/core-adapter");

// src/Controller.ts
var import_components_utils = require("@arcgis/components-utils");

// src/types.ts
var controllerSymbol = Symbol("controller");

// src/utils.ts
var isController = (value) => typeof value === "object" && value !== null && (controllerSymbol in value || "hostConnected" in value || "hostDisconnected" in value || "hostUpdate" in value || "hostUpdated" in value);

// src/ControllerInternals.ts
var ControllerInternals = class {
  constructor() {
    this._ambientControllers = [];
    /**
     * The type definition has to be duplicated due to the
     * "'use' is referenced directly or indirectly in its own type annotation."
     * error
     */
    this.use = async (value, watchExports) => {
      const controller = this.useRefSync(value);
      if (controller === void 0) {
        if (typeof watchExports === "function") {
          const error = new Error(
            `Unable to resolve a controller from the provided value, so can't watch it's exports. ${unresolvableExports}`
          );
          if (process.env.NODE_ENV === "production") {
            console.error(error);
          } else {
            throw error;
          }
        }
        return value;
      }
      await controller.ready;
      if (typeof watchExports === "function") {
        if (controller.watchExports === void 0) {
          throw new Error(`The controller must implement watchExports method to support watching exports`);
        }
        const unsubscribe = controller.watchExports(
          (exports2) => watchExports(exports2, unsubscribe)
        );
      }
      return controller.exports;
    };
    this.useRef = async (value) => {
      const controller = this.useRefSync(value);
      if (controller === void 0) {
        throw new Error(`Unable to resolve a controller from the provided value. ${unresolvableExports}`);
      }
      await controller.ready;
      return controller;
    };
    this.useRefSync = (value) => {
      const ambientChildController = this.retrieveAmbientChildController();
      if (ambientChildController !== void 0) {
        return ambientChildController;
      }
      const component = Controller.internals.retrieveComponent();
      const controller = component.manager.internals.resolveExports(value);
      if (controller !== void 0) {
        return controller;
      }
      if (isController(value)) {
        return value;
      }
      return void 0;
    };
    this.shouldBypassSetter = false;
    this.shouldBypassGetter = false;
    this.shouldBypassReadonly = false;
    /**
     * A map from component instance or component element to component instance.
     * To get from component instance or component element to component element,
     * you can just use the .el property
     */
    this.elementToInstance = /* @__PURE__ */ new WeakMap();
  }
  /*
   * Allow controllers to implicitly retrieve which component they are in, to
   * improve DX (avoids the need to pass "this" explicitly for each controller)
   */
  setAmbientComponent(component) {
    if (this._ambientComponent === component) {
      return;
    }
    this._ambientComponent = component;
    queueMicrotask(() => {
      if (this._ambientComponent === component) {
        this._ambientComponent = void 0;
      }
    });
  }
  retrieveComponent(name) {
    if (this._ambientComponent === void 0) {
      throw new Error(
        [
          `Unable to find out which component ${name || "this"} controller `,
          "belongs to. This might happen if you tried to create a controller ",
          "outside the component. If so, please wrap your controller ",
          "definition in an arrow function, ",
          "`const myController = ()=>makeController(...);` and call that",
          "function inside the component `my = myController();`, or ",
          "define your controller using makeGenericController/GenericController ",
          "instead.\n",
          "If you wish to use a controller inside an async controller, ",
          "make sure you are using controller.use.\n",
          "You might also have multiple instances of Controllers loaded"
        ].join("\n")
      );
    }
    return this._ambientComponent;
  }
  /*
   * Aids proxyExports() in knowing who is it's host
   */
  setParentController(controller) {
    if (controller === void 0) {
      this._ambientControllers = [];
      return;
    }
    const index = this._ambientControllers.indexOf(controller);
    this._ambientControllers = index === -1 ? [...this._ambientControllers, controller] : this._ambientControllers.slice(0, index + 1);
    queueMicrotask(() => {
      this._ambientControllers = [];
    });
  }
  retrieveParentControllers() {
    return this._ambientControllers;
  }
  /*
   * Aids controller.use in retrieving controller value when it receives
   * controller exports, rather than the controller itself
   */
  setAmbientChildController(controller) {
    if (this._ambientChildController === controller) {
      return;
    }
    this._ambientChildController = controller;
    queueMicrotask(() => {
      if (this._ambientChildController === controller) {
        this._ambientChildController = void 0;
      }
    });
  }
  retrieveAmbientChildController() {
    const controller = this._ambientChildController;
    this._ambientChildController = void 0;
    return controller;
  }
};
var unresolvableExports = [
  "The value you passed is not a controller and not a controller exports. If ",
  "your controller exports a literal value, try making your controller export ",
  "an object instead"
].join("");

// src/framework.ts
var makeMemberFilter = (filter) => (component) => {
  const members = component.manager.internals.members;
  return Object.entries(members ?? {}).filter(([_name, [propType]]) => (propType & filter) !== 0).map(([name]) => name);
};
var getPropMembers = makeMemberFilter(31 /* Prop */);
var getPropLikeMembers = makeMemberFilter(63 /* PropLike */);
var getMemberType = (component, name) => component.manager.internals.members?.[name]?.[0];

// src/Controller.ts
var _a;
var _Controller = class _Controller {
  constructor(component) {
    this._callbacks = {
      hostConnected: [],
      hostDisconnected: [],
      hostLoad: [],
      hostLoaded: [],
      hostUpdate: [],
      hostUpdated: [],
      hostDestroy: [],
      hostLifecycle: []
    };
    this._ready = new import_components_utils.Deferred();
    this._lifecycleDisconnected = [];
    this.connectedCalled = false;
    this.willLoadCalled = false;
    this.didLoadCalled = false;
    this[_a] = true;
    this.ready = this._ready.promise;
    /*
     * Setting default exports to "this" so that controllers that don't use
     * exports/proxyExports(), could still be used as if they did
     * (i.e with controller.use)
     */
    this._exports = makeProvisionalValue(this);
    this._exportWatchers = /* @__PURE__ */ new Set();
    const resolvedComponent = toControllerHost(
      component ?? _Controller.internals.retrieveComponent(new.target.name)
    );
    Object.defineProperty(this, "component", {
      writable: false,
      enumerable: false,
      configurable: true,
      value: resolvedComponent
    });
    this.component.addController(this);
    _Controller.internals.setParentController(this);
    if ("hostDestroy" in this) {
      this.component.manager.ensureHasDestroy();
    }
    const manager = this.component.manager;
    const isInControllerManager = manager === void 0;
    if (!isInControllerManager) {
      queueMicrotask(() => this.catchUpLifecycle());
    }
  }
  /**
   * If controller is being added dynamically, after the component
   * construction, then trigger connected and load right away
   */
  catchUpLifecycle() {
    const { manager } = this.component;
    const connectedWillStillHappen = !manager.connectedCalled;
    if (!connectedWillStillHappen && !this.connectedCalled) {
      this.triggerConnected();
    }
    const loadWillStillHappen = !manager.willLoadCalled;
    if (loadWillStillHappen) {
      return;
    }
    this.triggerLoad().then(() => {
      const loadedWillStillHappen = !manager.didLoadCalled;
      if (loadedWillStillHappen) {
        return;
      }
      this.triggerLoaded();
    }).catch(console.error);
  }
  get exports() {
    return this._exports;
  }
  /**
   * Set controller's exports property (for usage with proxyExports()) and mark
   * controller as ready (for usage in other controllers). Also, triggers
   * re-render of the component
   */
  set exports(exports2) {
    if (this._exports !== exports2) {
      this._exports = exports2;
      if (this.connectedCalled) {
        this.component.requestUpdate();
      }
      this._exportWatchers.forEach(import_components_utils.safeCall);
    }
    this._ready.resolve(exports2);
  }
  setProvisionalExports(exports2) {
    this._exports = makeProvisionalValue(exports2);
    this._exportWatchers.forEach(import_components_utils.safeCall);
  }
  watchExports(callback) {
    const safeCallback = () => callback(this._exports);
    this._exportWatchers.add(safeCallback);
    return () => void this._exportWatchers.delete(safeCallback);
  }
  /**
   * A flexible utility for making sure a controller is loaded before it's used,
   * regardless of how or where a controller was defined:
   *
   * @example
   * makeGenericController(async (component, controller) => {
   *   // Await some controller from the component:
   *   await controller.use(component.someController);
   *   // Initialize new controllers
   *   await controller.use(load(importCoreReactiveUtils));
   *   await controller.use(new ViewModelController(component,newWidgetsHomeHomeViewModel));
   *   await controller.use(someController(component));
   * });
   *
   * @remarks
   * If your controller is not async, and you are not creating it async, then
   * you are not required to use controller.use - you can use it directly.
   * Similarly, accessing controllers after componentWillLoad callback does not
   * require awaiting them as they are guaranteed to be loaded by then.
   */
  get use() {
    _Controller.internals.setAmbientComponent(this.component);
    return _Controller.internals.use;
  }
  /**
   * Just like controller.use, but returns the controller itself, rather than it's
   * exports
   *
   * Use cases:
   * - You have a controller and you want to make sure it's loaded before you
   *   try to use it
   * - Your controller is not using exports, so you wish to access some props on
   *   it directly
   * - You have a controller exports only, and you want to retrieve the
   *   controller itself. This is useful if you wish to call .watchExports() or
   *   some other method on the controller
   */
  get useRef() {
    _Controller.internals.setAmbientComponent(this.component);
    return _Controller.internals.useRef;
  }
  /**
   * Like useRef, but doesn't wait for the controller to get ready
   */
  get useRefSync() {
    _Controller.internals.setAmbientComponent(this.component);
    return _Controller.internals.useRefSync;
  }
  /**
   * If you need to set a prop/state without triggering the custom setter you
   * defined with getSet()/dynamicGetSet()/readonly(), set the value inside
   * of this function
   *
   * @example
   * @Prop() readOnly = this.manager.readOnly(true);
   *
   * someAction(): void {
   *   this.manager.bypassSetter(()=>{
   *     this.readOnly = false;
   *   });
   * }
   *
   */
  bypassSetter(callback) {
    _Controller.internals.shouldBypassSetter = true;
    try {
      return callback();
    } finally {
      _Controller.internals.shouldBypassSetter = false;
    }
  }
  /**
   * Like bypassSetter, but only bypasses this.manager.readonly(), rather that
   * all setters set using this.manager.getSet()
   */
  bypassReadonly(callback) {
    _Controller.internals.shouldBypassReadonly = true;
    try {
      return callback();
    } finally {
      _Controller.internals.shouldBypassReadonly = false;
    }
  }
  /**
   * Property reads inside of this function will bypass any custom getter you
   * may have, and read the value directly from what's stored in Stencil/Lit.
   *
   * This also bypasses reactiveUtils integration - reading a property inside of
   * bypassGetter won't make that property tracked.
   *
   * @example
   * reactiveUtils.watch(
   *   ()=>{
   *     this.manager.bypassGetter(()=>{
   *       console.log(this.someProp);
   *     });
   *     return this.prop;
   *   },
   *   console.log
   * )
   */
  bypassGetter(callback) {
    _Controller.internals.shouldBypassGetter = true;
    try {
      return callback();
    } finally {
      _Controller.internals.shouldBypassGetter = false;
    }
  }
  /**
   * Like this.manager.getSet(), but can be called on any component's
   * state/prop from anywhere, rather than just from the default value
   */
  dynamicGetSet(name, getSet) {
    this.genericGetSet(name, getSet);
  }
  /**
   * Like dynamicGetSet, but less type-safe. Useful in cases when trying to set
   * getters/setters in place where property names & types are not known
   * statically
   */
  genericGetSet(property, getSet) {
    var _a2, _b;
    const genericGetSet = getSet;
    const internals = this.component.manager.internals;
    if (typeof genericGetSet.get === "function") {
      (_a2 = internals.getters)[property] ?? (_a2[property] = []);
      internals.getters[property].unshift(genericGetSet.get);
    }
    const set = genericGetSet.set === "ignore" ? ignoreSet : genericGetSet.set;
    if (set) {
      (_b = internals.setters)[property] ?? (_b[property] = []);
      internals.setters[property].unshift(set);
    }
  }
  // FEATURE: improve typings
  /**
   * Dynamically set a watcher for any reactive property
   */
  watch(property, callback) {
    var _a2;
    const type = getMemberType(this.component, property);
    if (type === void 0) {
      throw new Error(
        `Trying to watch a non-@property, non-@state property "${property}". Either convert it into a @state() or use get/set syntax`
      );
    }
    const internals = this.component.manager.internals;
    (_a2 = internals.allWatchers)[property] ?? (_a2[property] = []);
    const watchers = internals.allWatchers[property];
    const genericCallback = callback;
    const safeCallback = (newValue, oldValue, propertyName) => (0, import_components_utils.safeCall)(genericCallback, null, newValue, oldValue, propertyName);
    watchers.push(safeCallback);
    return () => {
      const index = watchers.indexOf(safeCallback);
      if (index !== -1) {
        watchers.splice(index, 1);
      }
    };
  }
  controllerRemoved() {
    if (this.component.el.isConnected) {
      this.triggerDisconnected();
    }
    this.triggerDestroy();
  }
  // Register a lifecycle callback
  onConnected(callback) {
    this._callbacks.hostConnected.push(callback);
  }
  onDisconnected(callback) {
    this._callbacks.hostDisconnected.push(callback);
  }
  onLoad(callback) {
    this._callbacks.hostLoad.push(callback);
  }
  onLoaded(callback) {
    this._callbacks.hostLoaded.push(callback);
  }
  onUpdate(callback) {
    this._callbacks.hostUpdate.push(callback);
  }
  onUpdated(callback) {
    this._callbacks.hostUpdated.push(callback);
  }
  onDestroy(callback) {
    this.component.manager.ensureHasDestroy();
    this._callbacks.hostDestroy.push(callback);
  }
  onLifecycle(callback) {
    this._callbacks.hostLifecycle.push(callback);
    if (this.connectedCalled && this.component.el.isConnected) {
      this._callLifecycle(callback);
    }
  }
  // Call each lifecycle hook
  triggerConnected() {
    const genericController = this;
    if (genericController.hostConnected) {
      (0, import_components_utils.safeCall)(genericController.hostConnected, genericController);
    }
    this._callbacks.hostConnected.forEach(import_components_utils.safeCall);
    this.triggerLifecycle();
    this.connectedCalled = true;
  }
  triggerDisconnected() {
    const genericController = this;
    if (genericController.hostDisconnected) {
      (0, import_components_utils.safeCall)(genericController.hostDisconnected, genericController);
    }
    this._callbacks.hostDisconnected.forEach(import_components_utils.safeCall);
    this._lifecycleDisconnected.forEach(import_components_utils.safeCall);
    this._lifecycleDisconnected = [];
  }
  async triggerLoad() {
    if (this.willLoadCalled) {
      return;
    }
    this.willLoadCalled = true;
    const genericController = this;
    if (genericController.hostLoad) {
      await (0, import_components_utils.safeAsyncCall)(genericController.hostLoad, genericController);
    }
    if (this._callbacks.hostLoad.length > 0) {
      await Promise.allSettled(this._callbacks.hostLoad.map(import_components_utils.safeAsyncCall));
    }
    this._ready.resolve(this._exports);
  }
  triggerLoaded() {
    if (this.didLoadCalled) {
      return;
    }
    const genericController = this;
    if (genericController.hostLoaded) {
      (0, import_components_utils.safeCall)(genericController.hostLoaded, genericController);
    }
    this._callbacks.hostLoaded.forEach(import_components_utils.safeCall);
    this.didLoadCalled = true;
  }
  triggerUpdate() {
    const genericController = this;
    if (genericController.hostUpdate) {
      (0, import_components_utils.safeCall)(genericController.hostUpdate, genericController);
    }
    this._callbacks.hostUpdate.forEach(import_components_utils.safeCall);
  }
  triggerUpdated() {
    const genericController = this;
    if (genericController.hostUpdated) {
      (0, import_components_utils.safeCall)(genericController.hostUpdated, genericController);
    }
    this._callbacks.hostUpdated.forEach(import_components_utils.safeCall);
  }
  triggerDestroy() {
    const genericController = this;
    if (genericController.hostDestroy) {
      (0, import_components_utils.safeCall)(genericController.hostDestroy, genericController);
    }
    this._callbacks.hostDestroy.forEach(import_components_utils.safeCall);
  }
  triggerLifecycle() {
    const genericController = this;
    if (genericController.hostLifecycle) {
      this._callLifecycle(() => genericController.hostLifecycle());
    }
    this._callbacks.hostLifecycle.forEach((callback) => this._callLifecycle(callback));
  }
  _callLifecycle(callback) {
    _Controller.internals.setAmbientComponent(this.component);
    const cleanupRaw = (0, import_components_utils.safeCall)(callback);
    const cleanup = Array.isArray(cleanupRaw) ? cleanupRaw : [cleanupRaw];
    cleanup.forEach((cleanup2) => {
      if (typeof cleanup2 === "function") {
        this._lifecycleDisconnected.push(cleanup2);
      } else if (typeof cleanup2 === "object" && typeof cleanup2.remove === "function") {
        this._lifecycleDisconnected.push(cleanup2.remove);
      }
    });
  }
};
_a = controllerSymbol;
_Controller.internals = new ControllerInternals();
var Controller = _Controller;
var GenericController = class extends Controller {
  // Redundant constructor needed to improve typing
  constructor(component) {
    super(component);
  }
  // Overriding super's watch only to improve typing
  watch(property, callback) {
    return super.watch(
      property,
      callback
    );
  }
  dynamicGetSet(property, getSet) {
    super.genericGetSet(property, getSet);
  }
};
function makeProvisionalValue(base) {
  if (typeof base !== "object" && typeof base !== "function" || base === null) {
    return base;
  }
  const proxy3 = new Proxy(base, {
    get(target, prop, receiver) {
      if (cyclical.has(prop) && prop in target && target[prop] === proxy3) {
        return void 0;
      }
      if (prop in target || prop in Promise.prototype || typeof prop === "symbol") {
        return typeof target === "function" ? target[prop] : Reflect.get(target, prop, receiver);
      }
      console.error(`Trying to access "${prop.toString()}" on the controller before it's loaded. ${accessBeforeLoad}`);
      return void 0;
    },
    set(target, prop, newValue, receiver) {
      console.error(`Trying to set "${prop.toString()}" on the controller before it's loaded. ${accessBeforeLoad}`);
      return Reflect.set(target, prop, newValue, receiver);
    }
  });
  return proxy3;
}
var cyclical = /* @__PURE__ */ new Set(["exports", "_exports"]);
var accessBeforeLoad = process.env.NODE_ENV === "production" ? "" : [
  "This might be the case if you are trying to access an async controller in ",
  "connectedCallback(). Or, if you are using it inside of ",
  "componentWillLoad()/another controller without controller.use. Example correct ",
  "usage:\n",
  "makeController(async (component, controller)=>{ await controller.use(someOtherController); });"
].join("");
function toControllerHost(component) {
  if ("addController" in component) {
    return component;
  } else {
    throw new Error(
      "Component does not implement ControllerHost. This might be because you forgot to add 'manager: Controller<this> = useControllerManager(this);' in your component, or you tried to use some controller before that line"
    );
  }
}
var ignoreSet = (_, value) => value;

// src/proxyExports.ts
var proxyExports = (Class) => (...args) => {
  const ambientControllers = Controller.internals.retrieveParentControllers();
  const instance = new Class(...args);
  const initialExports = instance.exports;
  Controller.internals.setParentController(ambientControllers.at(-1));
  const internals = instance.component.manager.internals;
  internals.markExports(instance, initialExports);
  instance.watchExports((exports2) => internals.markExports(instance, exports2));
  Controller.internals.setAmbientChildController(instance);
  const hostCandidates = [instance.component, ...ambientControllers].reverse();
  return internals.trackKey(
    hostCandidates,
    (resolution) => resolution === void 0 ? void 0 : setProxy(instance, resolution, initialExports),
    initialExports
  );
};
function setProxy(controller, { host, key, type }, initialExports) {
  const genericHost = host;
  const controllerValueChanged = genericHost[key] !== controller.exports;
  const hostValueChanged = genericHost[key] !== initialExports;
  const controllerUpdatedExports = initialExports !== controller.exports;
  if (controllerValueChanged && !hostValueChanged && controllerUpdatedExports) {
    genericHost[key] = controller.exports;
  }
  const isProxyExportsOnComponent = host === controller.component;
  if (isProxyExportsOnComponent && type === "prop") {
    const internals = controller.component.manager.internals;
    if (hostValueChanged) {
      internals.markExports(controller, genericHost[key]);
    }
    controller.component.manager.watch(key, (value) => {
      if (value !== controller.exports) {
        internals.markExports(controller, value);
      }
    });
  }
  controller.watchExports(() => {
    if (genericHost[key] === controller.exports) {
      return;
    }
    const manager = controller.component.manager;
    const isReadOnly = manager.internals.readonlyProps?.has(key) === true;
    if (isReadOnly) {
      manager.bypassReadonly(() => {
        genericHost[key] = controller.exports;
      });
    } else {
      genericHost[key] = controller.exports;
    }
  });
}

// src/accessor/useAccessor.ts
var import_components_utils2 = require("@arcgis/components-utils");
var makeAccessorController = (loadAccessor, _options) => (component, options) => proxy(component, loadAccessor, options);
var AccessorController = class extends GenericController {
  constructor(component, _loadAccessor, _options) {
    super(component);
    this._loadAccessor = _loadAccessor;
    this._options = _options;
    this.reactiveUtils = this.component.reactiveUtils;
    // A mapping from bound component's "prop" name to Accessor instance's "property"
    this._watchedProperties = /* @__PURE__ */ new Map();
    this._isBinding = { value: true };
    this.setProvisionalExports(
      accessorSupport.makeGetterProxy(
        component,
        this._watchedProperties,
        this._isBinding,
        this.constructor.allowedPropNameMismatches
      )
    );
    const integrations = component.manager.internals.reactiveUtilsIntegrations;
    integrations.add(this);
    const reactiveUtilsIntegration = Array.from(integrations).find(
      (integration) => integration instanceof ReactiveUtilsIntegration
    );
    if (reactiveUtilsIntegration) {
      integrations.delete(reactiveUtilsIntegration);
    }
    integrations.add(reactiveUtilsIntegration ?? new ReactiveUtilsIntegration(this.component));
    component.manager.trackPropKey((resolved) => {
      if (resolved) {
        this._instancePropName = resolved;
      }
    }, this.exports);
  }
  hostConnected() {
    this._isBinding.value = false;
  }
  async hostLoad() {
    const component = this.component;
    if (component.reactiveUtils === void 0) {
      this.reactiveUtils = await (0, import_core_adapter.importCoreReactiveUtils)();
    } else {
      this.reactiveUtils = await this.use(component.reactiveUtils);
    }
    const parameters = accessorSupport.gatherParameters(this, this._watchedProperties);
    const finalParameters = this._options?.editConstructorProperties?.call(component, parameters) ?? parameters;
    const awaitedParameters = finalParameters instanceof Promise ? await finalParameters : finalParameters;
    const genericComponent = component;
    const existingInstance = typeof this._instancePropName === "string" ? genericComponent[this._instancePropName] : void 0;
    const hasInstance = existingInstance != null && existingInstance !== this.exports;
    if (hasInstance) {
      this._instance = existingInstance;
      existingInstance.set(awaitedParameters);
    } else {
      this._instance = await this._createInstance(awaitedParameters);
    }
    if (component.manager.destroyed) {
      return;
    }
    accessorSupport.watchComponentUpdates(this, this._instance, this._watchedProperties);
    accessorSupport.watchAccessorUpdates(this, this._instance, this._watchedProperties);
    this.exports = this._instance;
  }
  async _createInstance(parameters) {
    if (this._isAccessorConstructor(this._loadAccessor)) {
      return new this._loadAccessor(parameters);
    } else {
      return await this._loadAccessor(parameters);
    }
  }
  _isAccessorConstructor(loader) {
    return "prototype" in loader && "declaredClass" in loader.prototype;
  }
  hostDestroy() {
    if (this._instance) {
      this._instance.destroy();
    }
  }
  async reCreate() {
    this.hostDestroy();
    await this.hostLoad();
  }
};
var proxy = proxyExports(AccessorController);
var accessorSupport = {
  makeGetterProxy: (component, watchedProperties, isBinding, allowedPropNameMismatches) => new Proxy(
    {},
    {
      /*
       * Without this, makeProvisionalValue() will throw on accessing
       * non-existent prop
       */
      has: (target, prop) => typeof prop === "string" || prop in target,
      get: (target, prop) => {
        const value = Reflect.get(target, prop);
        if (typeof prop === "symbol" || prop in Promise.prototype) {
          return value;
        }
        const hasProp = prop in target;
        const doBinding = isBinding?.value ?? true;
        if (hasProp || !doBinding) {
          return value;
        }
        if (process.env.NODE_ENV !== "production" && watchedProperties.has(prop)) {
          throw new Error(
            `Tried to bind "${prop.toString()}" prop twice. This might also happen if you are trying to access the accessor instance before componentWillLoad()`
          );
        }
        return component.manager.trackKey(
          component,
          (resolved) => {
            if (process.env.NODE_ENV !== "production") {
              if (resolved === void 0) {
                throw new Error(
                  `Unable to resolve what property is "${prop.toString()}" being bound too. Check documentation for useAccessor to ensure proper usage. Make sure you are not trying to access the accessor instance before componentWillLoad()`
                );
              }
              const isFlippingBoolean = resolved.key.toLowerCase().includes("disable");
              const collidesWithNativeProp = prop in HTMLElement.prototype;
              const collidesWithCustomProp = allowedPropNameMismatches?.has(prop) === true;
              if (resolved.key !== prop && !collidesWithNativeProp && !collidesWithCustomProp && !isFlippingBoolean) {
                throw new Error(
                  `Tried to bind "${resolved?.key}" property to "${prop.toString()}" - property names must match`
                );
              }
              if (resolved.type === "property") {
                throw new Error(
                  `For two-way binding with Accessor to work, the property on your component must have @Prop() or @State() decorator. "${prop.toString()}" has neither`
                );
              }
            }
            if (resolved !== void 0) {
              watchedProperties.set(resolved.key, prop);
            }
          },
          value
        );
      }
    }
  ),
  // Update Accessor on component prop change
  watchComponentUpdates(controller, instance, watchedProperties) {
    function getter(_value, propName) {
      const propertyName = watchedProperties.get(propName);
      const value = instance[propertyName];
      const flipBoolean = typeof value === "boolean" && propertyName !== propName && propName.toLowerCase().includes("disable");
      return flipBoolean ? !value : value;
    }
    const setter = (newValue, _oldValue, propName) => {
      const propertyName = watchedProperties.get(propName);
      const value = instance[propertyName];
      const flipBoolean = typeof value === "boolean" && propertyName !== propName && propName.toLowerCase().includes("disable");
      const currentValue = flipBoolean ? !value : value;
      if (currentValue === newValue) {
        return newValue;
      }
      instance[propertyName] = flipBoolean ? !newValue : newValue;
      const finalValue = instance[propertyName];
      return flipBoolean ? !finalValue : finalValue;
    };
    const component = controller.component;
    const internals = component.manager.internals;
    watchedProperties.forEach((_propName, propertyName) => {
      internals.accessorGetter[propertyName] = getter;
      internals.accessorSetter[propertyName] = setter;
    });
  },
  // Update component on Accessor prop change
  watchAccessorUpdates(controller, instance, watchedProperties) {
    const { component } = controller;
    const genericComponent = component;
    const genericInstance = instance;
    const readonlyProps = findReadOnlyAccessorProps(instance);
    if (process.env.NODE_ENV !== "production") {
      setReadonlyProps?.(controller, readonlyProps);
    }
    component.manager.bypassGetter(
      () => (
        // Careful: Map's forEach callback arguments are (value, key), not (key, value)
        watchedProperties.forEach((propertyName, propName) => {
          if (process.env.NODE_ENV !== "production" && !(propertyName in instance)) {
            throw new Error(`"${propertyName}" does not exist on the accessor instance`);
          }
          if (readonlyProps.has(propertyName)) {
            return;
          }
          const domValue = genericComponent[propName];
          const modelValue = genericInstance[propertyName];
          const flipBoolean = typeof domValue === "boolean" && propertyName !== propName && propName.toLowerCase().includes("disable");
          const resolvedDomValue = flipBoolean ? !domValue : domValue;
          if (resolvedDomValue != null && modelValue !== resolvedDomValue) {
            genericInstance[propertyName] = resolvedDomValue;
          }
        })
      )
    );
    controller.onLifecycle(() => {
      if (instance.destroyed) {
        return;
      }
      return Array.from(
        watchedProperties,
        ([propName, propertyName]) => controller.reactiveUtils.watch(
          () => genericInstance[propertyName],
          () => {
            const newValue = genericInstance[propertyName];
            const flipBoolean = typeof newValue === "boolean" && propertyName !== propName && propName.toLowerCase().includes("disable");
            const resolvedNewValue = flipBoolean ? !newValue : newValue;
            component.manager.bypassSetter(() => {
              genericComponent[propName] = resolvedNewValue;
            });
          },
          { initial: true }
        )
      );
    });
  },
  gatherParameters(controller, watchedProperties) {
    const { component } = controller;
    const data = Object.fromEntries(
      Array.from(watchedProperties, ([prop, property]) => [property, component[prop]]).filter(
        ([, value]) => value !== void 0
      )
    );
    return process.env.NODE_ENV === "production" ? data : filterWatchedProperties?.(controller, data) ?? data;
  },
  reEmitAccessorEvents(controller, instance, reactiveUtils, prefix) {
    const isEvented = "on" in instance && typeof instance.on === "function";
    if (!isEvented) {
      return;
    }
    const toListen = Object.entries(controller.component).map(([key, unknown]) => {
      const value = unknown;
      if (!key.startsWith(prefix) || key === prefix || typeof value !== "object" || value === null || !("emit" in value) || typeof value.emit !== "function") {
        return void 0;
      }
      const emit = value.emit;
      const trimmedEventName = key.slice(prefix.length);
      const camelCaseEventName = (0, import_components_utils2.camelToKebab)(trimmedEventName);
      const eventName = camelCaseEventName.toLowerCase();
      return [eventName, emit];
    }).filter(import_components_utils2.isNotUndefined);
    if (toListen.length === 0) {
      return;
    }
    const eventTarget = instance;
    const getEventTarget = () => eventTarget;
    controller.onLifecycle(() => {
      if (instance.destroyed) {
        return;
      }
      return toListen.map(([eventName, emit]) => reactiveUtils.on(getEventTarget, eventName, emit));
    });
  },
  async reCreate(instance, component) {
    const accessorController = component.manager.useRefSync(instance);
    if (accessorController === void 0) {
      if (process.env.NODE_ENV !== "production") {
        console.error("Unable to resolve the useAccessor controller from the provided value");
      }
      return;
    }
    await accessorController.reCreate();
  }
};
function findReadOnlyAccessorProps(instance) {
  const accessor = instance;
  const properties = Object.entries(accessor.__accessor__?.metadata ?? {});
  return new Set(
    properties.filter(([_property, descriptor]) => descriptor?.readOnly === true).map(([property]) => property)
  );
}
var setReadonlyProps = process.env.NODE_ENV === "production" ? void 0 : (controller, properties) => {
  controller.component.manager.devOnlySetPersistentControllerData?.(controller, properties);
};
var filterWatchedProperties = process.env.NODE_ENV === "production" ? void 0 : (controller, data) => {
  const readonlyProperties = controller.component.manager.devOnlyGetPersistentControllerData?.(controller);
  if (readonlyProperties instanceof Set) {
    return Object.fromEntries(Object.entries(data).filter(([key]) => !readonlyProperties.has(key)));
  }
  return data;
};

// src/accessor/reactiveUtilsIntegration.ts
var import_core_adapter2 = require("@arcgis/core-adapter");

// src/ControllerManager.ts
var import_components_utils5 = require("@arcgis/components-utils");

// src/trackPropertyKey.ts
var import_components_utils3 = require("@arcgis/components-utils");

// src/ComponentInternals.ts
var import_components_utils4 = require("@arcgis/components-utils");
var customAccessor = Symbol("controllersCustomAccessor");
var nothing = Symbol("nothing");

// src/ControllerManager.ts
var import_components_utils6 = require("@arcgis/components-utils");
var destroyErrorMessage = `
If the component uses a controller that uses destroy() method, then the
component must have the following properties:
${// Don't expose internal code in production, and keep bundle smaller:
process.env.NODE_ENV === "production" ? `autoDestroyDisabled and destroy` : `
/**
 * If true, the component will not be destroyed automatically when it is
 * disconnected from the document. This is useful when you want to move the
 * component to a different place on the page, or temporary hide it. If this
 * is set, make sure to call the \`destroy\` method when you are done to prevent
 * memory leaks.
 */
@Prop() autoDestroyDisabled = false;

/** Permanently destroy the component */
@Method()
async destroy(): Promise<void> {
  await this.manager.destroy();
}
`}
`.trim();
var devOnlyControllerData = Symbol("devOnlyControllerData");
var autoDestroyOnDisconnectTimeout = 1e3;
var exportsForTests = process.env.NODE_ENV === "production" ? void 0 : {
  setAutoDestroyOnDisconnectTimeout: (timeout) => {
    autoDestroyOnDisconnectTimeout = timeout;
  }
};
var defaultGetterSetter = (value) => value;

// src/functional.ts
var makeController = (constructor) => proxy2(void 0, constructor);
var FunctionalController = class extends Controller {
  constructor(component, constructor) {
    super(component);
    const originalExports = this.exports;
    try {
      Controller.internals.setAmbientComponent(this.component);
      const value = constructor(this.component, this);
      const constructorChangedExports = this.exports !== originalExports;
      if (value instanceof Promise) {
        if (!constructorChangedExports) {
          this.setProvisionalExports(value);
        }
        const resolved = value.then((result) => {
          this.exports = result;
          super.catchUpLifecycle();
        }).catch((error) => {
          this._ready.reject(error);
          console.error(error);
        });
        this.onLoad(async () => await resolved);
      } else {
        if (!constructorChangedExports || value !== void 0) {
          this.exports = value;
        }
        queueMicrotask(() => super.catchUpLifecycle());
      }
    } catch (error) {
      this._ready.reject(error);
      console.error(error);
    }
  }
  /** Noop - will be called in the constructor instead */
  catchUpLifecycle() {
    return;
  }
};
var proxy2 = proxyExports(FunctionalController);

// src/accessor/reactiveUtilsIntegration.ts
var useReactiveUtilsIntegration = () => makeController((component) => {
  component.manager.internals.reactiveUtilsIntegrations.add(new ReactiveUtilsIntegration(component));
});
var accessorPromise = Promise.all([(0, import_core_adapter2.importCoreAccessor)(), (0, import_core_adapter2.importCoreAccessorSupportDecorators)()]);
var ReactiveUtilsIntegration = class extends GenericController {
  async hostLoad() {
    const [Accessor, { subclass, property }] = await accessorPromise;
    class AccessorSubclass extends Accessor {
    }
    const getter = (_value, propertyName) => accessor[propertyName];
    function setter(newValue, _oldValue, propertyName) {
      if (accessor !== void 0) {
        accessor[propertyName] = newValue;
      }
      return newValue;
    }
    const component = this.component;
    const internals = component.manager.internals;
    const enabledMembers = [];
    const allMembers = getPropLikeMembers(this.component);
    component.manager.bypassGetter(
      () => allMembers.forEach((name) => {
        const alreadyIntegrated = internals.accessorSetter[name] !== defaultGetterSetter;
        if (alreadyIntegrated) {
          return;
        }
        enabledMembers.push(name);
        internals.accessorGetter[name] = getter;
        internals.accessorSetter[name] = setter;
        property({
          value: component[name]
        })(AccessorSubclass.prototype, name);
      })
    );
    this._enabledMembers = enabledMembers;
    if (enabledMembers.length === 0) {
      return;
    }
    const Subclass = subclass(component.el.tagName)(AccessorSubclass);
    const accessor = new Subclass();
    this._instance = accessor;
  }
  controllerRemoved() {
    super.controllerRemoved();
    const internals = this.component.manager.internals;
    this._instance?.destroy();
    this._enabledMembers?.forEach((name) => {
      internals.accessorGetter[name] = defaultGetterSetter;
      internals.accessorSetter[name] = defaultGetterSetter;
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AccessorController,
  ReactiveUtilsIntegration,
  accessorSupport,
  makeAccessorController,
  useReactiveUtilsIntegration
});
