"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/plugins/index.ts
var plugins_exports = {};
__export(plugins_exports, {
  useComponentsControllers: () => useComponentsControllers
});
module.exports = __toCommonJS(plugins_exports);

// src/plugins/rollupPlugin.ts
var import_magic_string = __toESM(require("magic-string"), 1);
var import_estraverse = require("estraverse");

// src/framework.ts
var makeMemberFilter = (filter) => (component) => {
  const members = component.manager.internals.members;
  return Object.entries(members ?? {}).filter(([_name, [propType]]) => (propType & filter) !== 0).map(([name]) => name);
};
var getPropMembers = makeMemberFilter(31 /* Prop */);
var getPropLikeMembers = makeMemberFilter(63 /* PropLike */);

// src/plugins/rollupPlugin.ts
var useComponentsControllers = () => ({
  name: "use-components-controllers",
  transform(code, id) {
    if (id.startsWith("@stencil") && code.includes("export const BUILD =")) {
      const ast = this.parse(code, { ranges: true });
      if (!isProgram(ast)) {
        return;
      }
      return updateBuildFlags(ast, code);
    }
    if (id.includes("@stencil/core/internal/client/") && code.includes(initializeComponent)) {
      return transformLazy(code);
    }
    if (
      // Is in components folder
      id.includes("/src/components/") && // Defines HTML element
      code.includes("extends HTMLElement ") && // Defines controller manager
      code.includes("manager =")
    ) {
      return transformEsm(code);
    }
  }
});
var isProgram = (node) => node.type === "Program";
function updateBuildFlags(ast, code) {
  const magicString = new import_magic_string.default(code);
  (0, import_estraverse.traverse)(ast, {
    enter: (node) => {
      if (node.type === "VariableDeclarator" && node.id.type === "Identifier" && node.id.name === "BUILD" && node.init?.type === "ObjectExpression") {
        node.init.properties.forEach((property) => {
          if (property.type === "Property" && property.key.type === "Identifier" && typeMapping.has(property.key.name) && property.value.type === "Literal") {
            typeMapping.delete(property.key.name);
            if (property.value.raw !== "true") {
              magicString.update(property.value.range[0], property.value.range[1], "true");
            }
          }
        });
        return import_estraverse.VisitorOption.Break;
      }
      return;
    }
  });
  if (typeMapping.size > 0) {
    throw new Error(`Could not find properties ${[...typeMapping].join(", ")} in BUILD object`);
  }
  return { code: magicString.toString(), map: magicString.generateMap({ hires: true }) };
}
var typeMapping = /* @__PURE__ */ new Set([
  "lifecycle",
  "connectedCallback",
  "disconnectedCallback",
  "cmpWillLoad",
  "cmpDidLoad",
  "cmpWillUpdate",
  "cmpDidUpdate"
]);
var initializeComponent = "new Cstr(hostRef);";
var checkForMutable = `consoleDevWarn(
                  \`@Prop() "\${memberName}" on <\${cmpMeta.$tagName$}> is immutable but was modified from within the component.
More information: https://stenciljs.com/docs/properties#prop-mutability\`
                );`;
function transformLazy(code) {
  const splitOnConstructor = code.split(initializeComponent);
  if (splitOnConstructor.length === 1) {
    throw new Error("Couldn't find component initialization in initializeComponent");
  } else if (splitOnConstructor.length > 2) {
    throw new Error("Found multiple component initializations in initializeComponent");
  }
  const splitOnMutable = splitOnConstructor[0].split(checkForMutable);
  if (splitOnMutable.length !== 2) {
    throw new Error("Couldn't find check for mutable");
  }
  const updated = `${splitOnMutable[0]}${splitOnMutable[1]}Cstr.__forceUpdate=forceUpdate;Cstr.__registerControllers=(component)=>{registerInstance(component,hostRef);return hostRef.$cmpMeta$.$members$??{}};${initializeComponent}Cstr.__registerControllers=undefined;${splitOnConstructor[1]}`;
  return {
    code: updated,
    map: null
  };
}
function transformEsm(code) {
  const lines = code.split("\n");
  const componentStart = lines.findIndex((line) => line.includes("extends HTMLElement "));
  if (componentStart === -1) {
    throw new Error("Failed to find component start");
  }
  const componentMeta = code.match(reComponentMeta)?.[0];
  if (componentMeta === void 0) {
    throw new Error("Failed to find component meta");
  }
  let parsedComponentMeta = void 0;
  try {
    parsedComponentMeta = JSON.parse(componentMeta.replaceAll(reUndefined, "null"));
  } catch (error) {
    throw new Error(`Failed to parse component meta: ${String(error)}`);
  }
  if (!Array.isArray(parsedComponentMeta)) {
    throw new Error("Expected component meta to be an array");
  }
  const transformedMeta = transformEsmMeta(parsedComponentMeta);
  const hasMembers = parsedComponentMeta !== transformedMeta;
  const meta = `const ${metaVariable} = ${JSON.stringify(transformedMeta).replaceAll(reNull, "undefined")};`;
  const componentStartLine = lines[componentStart];
  const importLine = lines.findLastIndex((line) => line.includes("@stencil/core/internal/client"));
  if (importLine === -1) {
    throw new Error("Unable to find the stencil runtime import line");
  }
  const hasForceUpdateImport = lines.slice(0, importLine + 1).some((line) => line.includes("forceUpdate"));
  const updated = hasForceUpdateImport ? code : [
    ...lines.slice(0, importLine),
    lines[importLine].replace("}", ",forceUpdate}"),
    ...lines.slice(importLine + 1)
  ].join("\n");
  const final = addLifecycleCalls(
    updated.replace(componentStartLine, `${meta}
${componentStartLine}`).replace(componentMeta, metaVariable).replace(registerHost, `${registerHost}
${hasMembers ? registerControllers : registerControllersNoMembers}`).replaceAll("useControllerManager(this)", "useControllerManager(this,forceUpdate)")
  );
  return { code: final, map: null };
}
var reComponentMeta = /\[\d+,\s"[\w-]+"[\s\S]*\](?=\))/u;
var reUndefined = /(?<=[ ,])undefined(?=[,\]])/gu;
var reNull = /(?<=,)null(?=[,\]])/gu;
var metaVariable = "__cmpMeta";
var membersMetaIndex = 2;
var registerHost = "this.__registerHost();";
var registerControllers = `this.constructor.__registerControllers = ()=>${metaVariable}[${membersMetaIndex}]??{};`;
var registerControllersNoMembers = `this.constructor.__registerControllers = ()=>({});`;
var transformEsmMeta = (meta) => meta[membersMetaIndex] == null ? meta : [
  ...meta.slice(0, membersMetaIndex),
  Object.fromEntries(
    Object.entries(meta[membersMetaIndex]).map(([prop, data]) => [
      prop,
      [makePropsMutable(data[0]), ...data.slice(1)]
    ])
  ),
  ...meta.slice(membersMetaIndex + 1)
];
var makePropsMutable = (type) => (type & 31 /* Prop */) === 0 ? type : type | 1024 /* Mutable */;
var addLifecycleCalls = (code) => addLifecycleCall(addLifecycleCall(code, "connectedCallback"), "disconnectedCallback");
function addLifecycleCall(code, lifecycle) {
  const lifecycleSignature = `  ${lifecycle}() {`;
  const constructorSignature = "  constructor() {";
  const controllerCall = `this.manager._${lifecycle}();`;
  const lifecycleSignatureStart = code.indexOf(lifecycleSignature);
  if (lifecycleSignatureStart === -1) {
    return code.replace(constructorSignature, `${lifecycleSignature} ${controllerCall} }
  ${constructorSignature}`);
  } else {
    const lifecycleSignatureEnd = lifecycleSignatureStart + lifecycleSignature.length;
    return [
      code.slice(0, lifecycleSignatureEnd),
      `
        ${controllerCall}`,
      code.slice(lifecycleSignatureEnd)
    ].join("");
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useComponentsControllers
});
