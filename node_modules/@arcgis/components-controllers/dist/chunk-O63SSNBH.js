// src/framework.ts
function retrieveComponentMembers(component, isLit) {
  if (isLit) {
    const elementProperties = getLitProperties(component);
    component.manager.internals.members = Object.fromEntries(
      Array.from(elementProperties, ([name, { state, type }]) => [
        name,
        [
          state ? 32 /* State */ : type === Number ? 2 /* Number */ : type === Boolean ? 4 /* Boolean */ : 1 /* String */
        ]
      ])
    );
  } else {
    const constructor = component.constructor;
    const members = constructor.__registerControllers?.(component) ?? void 0;
    constructor.__registerControllers = void 0;
    if (typeof members !== "object") {
      throw new Error(
        "Failed to retrieve internal component meta. Make sure you have the useComponentsControllers() Rollup Plugin for Stencil Controllers configured in your Stencil config."
      );
    }
    component.manager.internals.members = members;
  }
}
var getLitProperties = (component) => component.constructor.elementProperties;
function parsePropertyValue(value, type = 8 /* Any */) {
  const isComplex = value == null || typeof value === "object" || typeof value === "function";
  if (isComplex) {
    return value;
  }
  if ((type & 4 /* Boolean */) !== 0) {
    return value === "false" ? false : value === "" || !!value;
  } else if ((type & 2 /* Number */) !== 0) {
    return Number.parseFloat(value);
  } else if ((type & 1 /* String */) !== 0) {
    return String(value);
  } else {
    return value;
  }
}
var makeMemberFilter = (filter) => (component) => {
  const members = component.manager.internals.members;
  return Object.entries(members ?? {}).filter(([_name, [propType]]) => (propType & filter) !== 0).map(([name]) => name);
};
var getPropMembers = makeMemberFilter(31 /* Prop */);
var getPropLikeMembers = makeMemberFilter(63 /* PropLike */);
var getMemberType = (component, name) => component.manager.internals.members?.[name]?.[0];
function getPropType(component, name) {
  const type = getMemberType(component, name);
  if (type === void 0) {
    return void 0;
  } else if (type & 32 /* State */) {
    return "state";
  } else {
    return "prop";
  }
}

export {
  retrieveComponentMembers,
  getLitProperties,
  parsePropertyValue,
  getPropMembers,
  getPropLikeMembers,
  getMemberType,
  getPropType
};
